// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x6b\x24\x45\x14\x7d\xcf\xaf\xb8\xe9\x97\x79\x30\x35\x3d\xb2\xd9\x65\x8d\xdd\x23\xb2\x89\x6e\x24\x61\x17\x1d\x11\x59\xf6\xe1\x4e\xd5\x9d\xa9\x4a\xaa\xab\xda\xba\xd5\x33\x19\xf0\x17\x28\x8a\x3e\x88\x88\x8b\x20\x08\xfa\x24\x08\x22\xf8\x01\xfe\x19\x93\xf8\x33\xa4\xba\x67\x92\xd9\x44\x71\x97\x6c\xbf\x74\x55\xf5\xa9\x73\x4e\xdd\x3e\x7d\xbb\xd8\xdc\x7d\x70\x6f\xf4\xfe\xc3\x3d\xd0\xb1\xb2\xc3\x8d\x22\xdd\xc0\xa2\x9b\x96\x99\x74\x19\xb8\xa9\xc0\xba\x2e\x33\x6b\x5c\x73\xb2\x8b\xac\xb3\xe1\xc6\x46\xa1\x09\xd5\x70\x03\x00\xa0\xa8\x28\x22\xe8\x18\x6b\x41\x1f\x34\x66\x56\x66\xf7\xbc\x8b\xe4\xa2\x18\x2d\x6a\xca\x40\x76\xb3\x32\x8b\x74\x12\xf3\x44\xfe\x2a\x48\x8d\x81\x29\x96\xef\x8e\xde\x10\x77\xb3\x25\x4f\x34\xd1\xd2\xf0\xec\xc9\x27\xa7\x1f\x7d\x7b\xfa\xd5\x0f\xe7\x5f\x7f\x7e\xf6\xe9\xf7\xa7\x3f\x7e\x73\xf6\xe5\x2f\xa7\x3f\x7d\x71\xfe\xdd\x6f\x45\xde\x41\xd6\x64\x1d\x56\x54\x66\x33\x43\xf3\xda\x87\xb8\x26\x36\x37\x2a\xea\x52\xd1\xcc\x48\x12\xed\x64\x0b\x8c\x33\xd1\xa0\x15\x2c\xd1\x52\xf9\x72\x7f\x90\x5d\xa7\x52\xc4\x32\x98\x3a\x1a\xef\xd6\xd8\x0e\xbd\x33\xd1\x07\x58\xf8\x26\xc0\x41\x2a\x04\x30\x85\x19\x05\x88\x3a\xf8\x66\xaa\x01\x81\x4d\x55\x5b\x82\x39\x8d\x41\x21\xeb\xb1\xc7\xa0\xfa\xf0\xa0\x26\x07\xec\x9b\x20\x09\xd0\x29\x98\x04\xa2\xcd\x7f\xd1\xc5\xba\xb6\x24\x2a\x3f\x36\x96\xc4\x9c\xc6\xa9\xe6\x42\x62\x8d\x63\xbb\x5e\xc3\x05\xf1\x6a\xb3\x35\xee\x18\x02\xd9\x32\x63\xed\x43\x94\x4d\x04\x23\x93\x6b\x1d\x68\x52\x66\x1c\x31\x1a\x99\x4f\x70\x96\x56\xfb\x46\xfa\x0c\xe2\xa2\xa6\x32\x33\x15\x4e\x29\x3f\x11\x2d\xfa\x1a\xd9\x3a\xc7\xf3\x6c\x6e\x77\xf4\xf2\x7c\xe2\x5d\xe4\xfe\xd4\xfb\xa9\x25\xac\x0d\xf7\xa5\xaf\x72\xc9\xfc\xda\x04\x2b\x63\x17\xe5\x21\x85\x60\xe6\x84\x51\x53\xd8\xb9\x35\x18\x98\x88\xd6\xc8\xad\x5b\x83\xc1\x87\xa9\x56\x2f\xbd\x83\x8e\x77\xb6\x07\x83\xad\x3b\x83\x41\xaf\xb5\xd4\xe3\xb8\xb0\xc4\x9a\x28\xf6\x3a\x17\xbd\x36\x4a\x92\xb9\x77\xbd\x16\x17\xd8\x95\xe3\x15\xf6\x4a\x61\x24\x73\x5e\xa1\x71\xfd\xf4\xe8\x66\x34\x51\x53\x45\xfc\x02\x88\xd0\x99\x0a\x23\x2d\x99\x3a\xaa\x4d\x21\xe0\x75\x37\x6d\x2c\xa6\xe4\x8d\x19\x84\x58\x8a\x74\x41\x05\x0e\xf2\x82\xe4\x28\x71\xb4\xd8\x7e\x65\x5c\xff\x88\x9f\x12\x3d\xc2\x19\x76\x9b\xb2\x61\x91\x77\xa3\x67\xe1\x12\xc1\x37\x91\x9e\x83\x2d\x79\x3e\x20\xb8\x3f\x3a\x3c\xb8\x0d\xac\x4d\xb5\x05\x13\x1f\x60\x7f\xef\x8e\xb8\x0b\xdc\xd4\xe9\x5b\x05\x3f\x59\x02\xc8\x52\x45\x2e\xae\x9d\x6c\x53\x88\x47\x66\x02\x36\xc2\xfe\x1e\xbc\xf2\xb8\x5b\xed\xae\xa7\x9c\xa6\xa6\xc3\x3b\x79\xdb\x54\x6e\x27\x9d\x65\xee\xa4\x57\xd4\xe6\x8e\x67\x2e\x8f\xa1\x71\xc7\x1d\x24\x1d\xe1\x8a\xd7\x4e\xef\x11\x39\x65\x26\x8f\x93\x81\x22\xef\x5a\xdb\x46\x31\xf6\x6a\xb1\x7a\x0b\xca\xcc\x40\x5a\x64\x2e\x33\x4d\xc1\x67\x6b\x9b\xf5\xf6\xea\x49\xdb\x9d\xb2\xe1\xdf\x7f\x7e\x76\xfe\xfb\xcf\x7f\xfd\xfa\xf1\xf9\x93\x3f\x8a\x5c\x6f\xaf\x61\xb9\x42\x6b\x87\xef\xa1\x3d\xa6\xb0\x05\xdd\xbd\xc8\xbb\xd5\x4b\x54\x9b\x27\xc1\x73\x13\xa5\xa6\x30\x2c\xf2\x2b\x0b\x97\x48\x87\x33\x31\xc6\x04\x59\x8d\x3a\xbb\xb9\x32\xb3\xf5\x00\x8d\xa8\xaa\x2d\x46\x62\x78\x93\x22\xbc\x4d\x4e\x51\x20\x05\xf7\x29\xd0\x65\xd5\xd3\x19\x8d\x2a\xb3\xda\x36\x53\xe3\x38\x5b\x1d\x6b\x99\x4a\x05\x13\x54\xb4\xef\x76\xfd\xbc\xfb\x2b\xa4\xae\xfb\x1f\x7a\x6f\x5d\x64\x63\xfd\x9d\xc2\x43\x8b\x92\x14\x60\x84\xa8\x09\xc8\xa9\x14\x82\x34\x54\x5e\x36\x29\x03\xc0\xbe\x9d\xd7\x38\x25\x06\xeb\x31\x89\x72\xa4\xf0\x7f\xa9\xbf\xf8\x39\xdd\x38\xf3\x95\x57\x8d\x25\xbe\x31\x0f\x57\xde\x47\x6d\xe8\xd9\x3f\xc4\x22\x5f\x26\xae\x68\xd3\x3a\xfc\x27\x00\x00\xff\xff\xbf\x24\xc2\x49\x99\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1945, mode: os.FileMode(436), modTime: time.Unix(1508493443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

