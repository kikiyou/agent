// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/command.html
// templates/upload.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdd\x6a\x24\x45\x14\xbe\xcf\x53\x9c\xf4\xcd\x5c\x98\x9a\x1e\xd9\x1f\xd6\xd8\x3d\x22\x9b\xe8\x46\x12\x76\xd1\xf1\x42\x96\xbd\xa8\xa9\x3a\x33\x55\xd9\xea\xaa\xb6\xce\xe9\x99\x0c\xf8\x04\x8a\xa2\x17\x22\xe2\x22\x08\x82\x5e\x09\x82\x08\xfe\x80\x2f\x63\x12\x1f\x43\xaa\x7b\x26\xdb\x9b\x28\xee\x12\xe7\x66\xaa\xaa\xbf\xf3\x9d\xaf\xcf\xf9\xea\x74\xb1\xbd\x77\xff\xee\xe4\xbd\x07\xfb\x60\xb8\x72\xe3\xad\x22\xfd\x81\x93\x7e\x5e\x66\xca\x67\xe0\xe7\x42\xd6\x75\x99\x39\xeb\x9b\x93\x3d\x49\x26\x1b\x6f\x6d\x15\x06\xa5\x1e\x6f\x01\x00\x14\x15\xb2\x04\xc3\x5c\x0b\x7c\xbf\xb1\x8b\x32\xbb\x1b\x3c\xa3\x67\x31\x59\xd5\x98\x81\xea\x76\x65\xc6\x78\xc2\x79\x22\x7f\x15\x94\x91\x91\x90\xcb\x77\x27\x6f\x88\x3b\xd9\x9a\x87\x2d\x3b\x1c\x9f\x3d\xf9\xf8\xf4\xc3\x6f\x4e\xbf\xfc\xfe\xfc\xab\xcf\xce\x3e\xf9\xee\xf4\x87\xaf\xcf\xbe\xf8\xf9\xf4\xc7\xcf\xcf\xbf\xfd\xb5\xc8\x3b\x48\x2f\xad\x97\x15\x96\xd9\xc2\xe2\xb2\x0e\x91\x7b\xc9\x96\x56\xb3\x29\x35\x2e\xac\x42\xd1\x6e\x76\xc0\x7a\xcb\x56\x3a\x41\x4a\x3a\x2c\x5f\x1e\x8e\xb2\xab\x54\x1a\x49\x45\x5b\xb3\x0d\xbe\xc7\x76\x14\xbc\xe5\x10\x61\x15\x9a\x08\x87\xa9\x10\x40\x18\x17\x18\x81\x4d\x0c\xcd\xdc\x80\x04\xb2\x55\xed\x10\x96\x38\x05\x2d\xc9\x4c\x83\x8c\x7a\x08\xf7\x6b\xf4\x40\xa1\x89\x0a\x41\x7a\x0d\xb3\x88\xb8\xfd\x0f\x79\x65\x5d\x3b\x14\x55\x98\x5a\x87\x62\x89\xd3\x54\x73\xa1\x64\x2d\xa7\xae\x5f\xc3\x15\xd2\x26\xd8\x59\xff\x18\x22\xba\x32\x23\x13\x22\xab\x86\xc1\xaa\xa4\xda\x44\x9c\x95\x19\xb1\x64\xab\xf2\x99\x5c\xa4\xd3\xa1\x55\x21\x03\x5e\xd5\x58\x66\xb6\x92\x73\xcc\x4f\x44\x8b\xbe\x42\xd6\xe7\x78\x91\xe0\x36\x62\x90\xe7\xb3\xe0\x99\x86\xf3\x10\xe6\x0e\x65\x6d\x69\xa8\x42\x95\x2b\xa2\xd7\x66\xb2\xb2\x6e\x55\x1e\x61\x8c\x76\x89\x92\x0d\xc6\xdd\x1b\xa3\x91\x65\xe9\xac\xda\xb9\x31\x1a\x7d\x90\x6a\xf5\xd2\x3b\xd2\xd3\xee\xcd\xd1\x68\xe7\xf6\x68\x34\x68\x25\x0d\x88\x57\x0e\xc9\x20\xf2\xa0\x53\x31\x68\xad\xa4\x88\x06\x57\x6b\x71\x81\xdd\x28\xde\x60\x2f\x15\x46\x11\xe5\x95\xb4\x7e\x98\x1e\x5d\x8f\x86\x0d\x56\x48\xff\x03\x91\xf4\xb6\x92\x8c\x6b\xa6\x8e\x6a\x5b\x08\x78\xdd\xcf\x1b\x27\x93\xf3\xa6\x04\x42\xac\x93\x74\x46\x05\x8a\xea\x82\xe4\x38\x71\xb4\xd8\x61\x65\xfd\xf0\x98\x9e\x49\x7a\x2c\x17\xb2\x0b\xca\xc6\x45\xde\xad\x9e\x87\x4b\xc4\xd0\x30\xbe\x00\x5b\xd2\x7c\x88\x70\x6f\x72\x74\x78\x0b\xc8\xd8\x6a\x07\x66\x21\xc2\xc1\xfe\x6d\x71\x07\xa8\xa9\xd3\x5d\x85\x30\x5b\x03\xd0\x61\x85\x9e\x7b\x6f\xb6\x2d\xc4\x43\x3b\x03\xc7\x70\xb0\x0f\xaf\x3c\xea\x4e\xbb\xdf\x33\x4a\xd3\xd0\xa1\xdd\xbc\x1d\x2a\xb7\x52\x9e\xb5\xef\x54\xd0\xd8\xfa\x8e\x16\x3e\xe7\xd8\xf8\xc7\x1d\x24\xbd\xc2\x25\xad\x5d\xbe\x87\xe8\xb5\x9d\x3d\x4a\x02\x8a\xbc\x1b\x6d\x5b\xc5\x34\xe8\xd5\xa6\x0b\xda\x2e\x40\x39\x49\x54\x66\x06\x63\xc8\x7a\xc1\xe6\xe6\xe6\x49\x3b\x9d\xb2\xf1\x5f\x7f\x7c\x7a\xfe\xdb\x4f\x7f\xfe\xf2\xd1\xf9\x93\xdf\x8b\xdc\xdc\xec\x61\x5b\xa7\x08\x5a\x5a\x56\x06\xe3\xb8\xc8\x2f\x1d\x3c\x45\x7a\xb9\x10\x53\x99\x20\x9b\x55\x27\x24\xd7\x76\xd1\xb7\xc6\x04\xab\xda\x49\x46\x82\x37\x91\xe1\x6d\xf4\x1a\x23\x6a\xb8\x87\x11\x9f\xd6\x33\xa9\xb7\xba\xcc\x6a\xd7\xcc\xad\xa7\x6c\x23\x78\xed\x37\x0d\x33\xa9\xf1\xc0\xef\x85\x65\x37\xef\xd3\x3c\xfd\x97\x7c\x6f\x5d\x74\xbd\xdf\x2d\x78\xe0\xa4\x42\x0d\x92\x81\x0d\x02\x7a\x9d\xda\x9b\x96\x3a\xa8\x26\x75\x17\x28\xb4\xfb\x5a\xce\x91\xc0\x05\x99\x92\x12\x63\xfc\x2f\x3f\x5f\x7c\x76\xae\xed\xe6\x2a\xe8\xc6\x21\x5d\x9b\x87\xaa\x10\xd8\x58\x7c\xfe\x2b\x56\xe4\x6b\x2f\x15\xad\x0f\xc7\x7f\x07\x00\x00\xff\xff\x6a\x93\xac\xef\x73\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1907, mode: os.FileMode(436), modTime: time.Unix(1509332206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommandHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\xaf\x1b\xc5\x15\x7f\xcf\xa7\x38\x99\xa0\xda\x16\x77\xd7\x24\x34\x7d\xb8\xb1\x1d\x41\x12\x68\x2a\x10\x69\x13\x1e\xaa\x16\x55\xe3\xdd\x63\xef\x24\xb3\x33\xcb\xcc\xac\xef\xbd\x44\x91\x5a\xa9\x85\xfe\xa1\x15\xa8\xad\x28\x50\x24\x90\xa0\x45\x95\x28\x8f\xa4\xa2\xc0\x97\xc9\x4d\x6e\x9e\xfa\x15\xaa\x99\xd9\xb5\xd7\xeb\x5d\xdb\x37\x24\x48\xad\xf0\xc3\xf5\x7a\x77\xce\x99\xf3\xff\xfc\xce\xec\x1d\x9c\xbc\xf8\xc2\x85\x6b\x3f\xbe\x72\x09\x12\x93\xf2\xd1\x89\x81\xff\x3a\x31\x48\x90\xc6\xa3\x13\x00\x00\x83\x14\x0d\x05\x41\x53\x1c\x92\x19\xc3\xbd\x4c\x2a\x43\x20\x92\xc2\xa0\x30\x43\xb2\xc7\x62\x93\x0c\x63\x9c\xb1\x08\x03\xf7\x63\x07\x98\x60\x86\x51\x1e\xe8\x88\x72\x1c\x9e\x26\x05\x23\xc3\x0c\xc7\xd1\xfd\xcf\xdf\xbc\xfb\xce\x5b\x77\xfe\xf5\xbb\xfb\x6f\x7d\x3c\xe8\xfb\x7b\xfe\xf9\xc9\x20\x80\xa7\xa5\x34\xda\x28\x9a\x41\x10\x14\xb7\x39\x13\x37\x40\x21\x1f\x12\x6d\x0e\x38\xea\x04\xd1\x10\x48\x14\x4e\x86\x24\x31\x26\xd3\xbb\xfd\x7e\x14\x8b\x70\x2c\xa5\x89\xb4\x0e\x23\x99\xf6\xc7\x25\x9b\xfe\x93\xe1\x93\xe1\xd9\x7e\xa4\xf5\xe2\x5e\x98\x32\x11\x46\x5a\x93\x47\xb5\x41\x60\x12\x4c\xf1\x38\xdb\x68\x43\x0d\x8b\x1c\x97\x89\x14\x26\xa0\x7b\xa8\xe5\x03\xb3\x70\x0f\x5b\xe8\x12\xa9\x4c\x94\x1b\x60\x91\x14\x35\xd2\x09\x9d\xd9\xbb\x21\x8b\x24\x01\x73\x90\xe1\x90\xb0\x94\x4e\xb1\xbf\x1f\xb8\xd5\xa3\x13\x83\xbe\x8f\x8b\x13\x83\xb1\x8c\x0f\x46\x27\x3c\x77\xaa\x59\x8c\x10\x71\xaa\xf5\x90\x70\x9c\x98\x20\xa3\x02\x79\xb1\xf9\xdc\xb5\x57\xdd\x2e\x20\xe8\x6c\x4c\xd5\xdc\xbd\xee\xb1\xa0\xb3\x92\xbe\x78\xec\xbf\x02\x2f\x59\x60\x64\x56\xde\x61\x62\x86\x4a\x63\x85\xb9\xe3\x10\xb3\x1a\x87\xc0\x4a\x8a\xaa\xb6\xce\xad\xd5\x19\x15\xb5\xc5\x63\x45\x45\x0c\xee\x6f\xe0\x42\x92\x2c\xc7\x69\x95\x64\x6c\xad\xc9\xc4\x34\x88\x72\xa5\xa5\x22\xa3\xef\x9c\xda\x3f\x73\x96\xe2\xb9\x41\xdf\x2e\x1b\x15\x5f\xcb\xf2\xf5\x63\x36\x6b\x10\x99\xc5\xa5\x08\xa4\x26\x51\x24\x39\xa7\x99\x46\x28\x2f\x9a\x34\xc9\x79\x85\xaa\xb4\x90\xa0\xb3\x86\xb5\x45\x1c\x94\xeb\x63\x25\xb3\x58\xee\x89\x96\x95\xde\xaf\x45\x78\x9c\x22\x75\xaa\xc0\xc8\xe9\x94\x23\x81\x98\x1a\x5a\xfc\xa8\xf0\x04\x25\xed\xef\x71\x6e\x8c\x0d\x32\xaa\x18\x0d\x12\xaa\x33\x99\xe5\xd9\x90\x18\x95\x63\x71\x13\xf7\x33\x2a\x62\x8c\x87\x64\x42\xb9\x55\xf1\xf0\xf6\xed\x7b\x7f\xfa\xf8\xf0\xcd\x2f\xee\x7c\xfe\xe1\xfd\x77\x5f\x5d\xf6\x55\x44\x15\x1a\x32\x9a\x9b\x99\xae\x91\x3d\xe7\xce\xb6\x9c\x69\x73\x41\xa6\x29\x15\xf1\x55\x9b\x2a\x75\x3d\x52\x14\xf9\x1a\x13\x40\x19\xbb\xe7\xb3\x24\x03\x85\x2f\xe7\x4c\xe1\xcf\xa4\x88\xb0\xdb\x59\x66\x1d\x66\x49\xd6\xe9\x9d\x83\xf3\xd5\xb8\x5e\x61\xd5\xcf\x79\x8b\x67\xfa\x9c\x35\xf8\xd7\xad\x5f\xbd\xed\x0d\xeb\x14\xa4\x71\x5c\x08\x31\x57\x6e\x6c\x04\x8c\x8d\x08\x74\x1e\x45\xa8\x75\x19\x16\x63\x23\xc8\xe8\xee\x67\x9f\x1f\xfe\xf6\xfd\x65\xb3\x4e\xf9\x41\x96\xd8\x04\x87\xf9\x55\x90\xf1\x5c\x07\x9a\x4d\xe7\xde\x63\x71\x8c\xa2\xf0\xdd\xc2\x03\x5e\x90\x06\xc1\x2b\x12\xc6\xc8\xd1\x60\x9b\x90\x31\x15\x53\x54\x4b\x32\x1e\xfe\xfa\xfd\xfb\x6f\x7f\xb8\x59\x46\xa3\xa8\x4e\x1e\x50\xbe\xb6\xc4\x29\x2f\x15\x9b\x26\xa6\x2d\x8b\x56\x6b\xcd\x44\xaa\xb4\x24\xb5\x05\x70\x5d\x56\xb9\xb5\xd6\x30\x2a\x17\x85\x55\x9e\x91\x2a\x9d\x5b\xc6\x3e\x0f\xa6\x4a\xe6\xd9\x86\xc0\xbc\x79\x93\x4d\x20\x8c\x71\x42\x73\x6e\xae\x50\x93\xdc\xba\xb5\x3e\x90\x39\x1d\x23\xaf\x49\x6e\x70\xdf\x90\xd1\xdd\xdf\xfc\xfd\xe8\x83\xd7\xef\xbd\xfb\xcf\xc3\x2f\xfe\xfc\x9f\x7f\xbf\x33\xe8\xbb\xa5\x1b\xf2\x82\x89\xcc\xf6\x91\x78\x48\x32\x6a\x12\x52\x40\x04\x7f\xed\xbb\x87\x63\xbe\xa4\x97\x85\x0d\x4a\x72\x70\xb4\x81\x4e\x09\x68\xf6\x0a\x0e\xc9\x99\x27\x08\xcc\x28\xcf\x71\x48\x6e\xde\x5c\xd6\x89\x8c\xe0\xe6\x4d\x14\xf1\x26\xed\xc6\x1b\xc4\x75\xe1\x34\x0a\x01\xc2\xa6\x02\xdd\xa2\x59\x54\x86\xad\x57\x6e\xfe\xb3\xaa\x9f\xd7\xe0\x7b\x4f\x34\x6a\x4a\x20\xe3\x34\xc2\x44\xf2\x18\xd5\x90\x1c\x7d\xfa\xd9\xe1\x5f\x3f\x3e\xfa\xea\xed\xfb\xaf\xbd\x7e\xf4\xe5\x1f\x0f\x7f\xf5\xd1\xd5\x04\x39\xf7\x05\xef\xee\x7b\x1f\x1d\x7d\xf5\xc6\xd1\x07\xaf\xaf\x0b\x9f\xfe\x26\x3d\x17\xc2\x5b\x2c\x57\x4a\xee\xaf\x0b\x13\x9f\x26\xb0\x9c\x30\x9b\x0b\x60\x25\xe6\xa3\x04\xa3\x1b\x63\xb9\xbf\x94\xb4\xc7\x8f\x3c\xdb\x45\x37\xd0\x55\xf4\xf1\x06\x2f\xb7\x2e\xb5\x92\x02\xaf\xb1\xb4\x2c\x2e\x97\xf5\xc5\x03\x41\x53\x16\x6d\xc1\x16\x7c\x83\x2b\x44\x32\x52\x72\xc3\x32\x4d\xe6\x1d\x6f\x54\xb0\xea\x5f\x16\x06\x15\x8d\x0c\x9b\xe1\x76\x4c\x5d\x6c\x5d\xb0\x82\x82\x49\x98\x86\x89\x54\xbb\x83\xb1\x1a\x9d\x0e\xa1\x90\x53\x17\x9d\x84\x89\x29\xc4\x7e\x1b\xc8\xb3\x98\x1a\xd4\xd0\x1d\xb0\x11\xee\xef\x82\xa1\x8c\xef\x80\x91\xd9\xa0\xcf\x46\x3d\x4b\x7f\xa6\x91\x9e\x95\xe2\x49\x31\xa7\x9d\xb1\x1d\x18\x53\x9d\xec\x80\xd6\x89\xa7\xdf\x10\xf1\x4b\x0a\xac\xeb\xab\x7e\xc1\x86\xea\xe0\xc0\x0e\xac\x6b\x84\x50\xeb\x11\x8b\x52\xb8\xd2\x20\x32\xc5\x52\xaa\x0e\xca\x1a\xb5\x4d\xeb\xa2\x07\x41\xc4\x54\xc4\xf1\xc1\x9a\xc3\x42\x0d\x9b\xc8\x6d\xfd\x7a\x05\xcf\x41\x73\xc3\x6e\x42\x7e\x27\x83\xa0\x1f\x0a\x3a\x5b\x80\xbc\x25\x34\xdc\x17\xb4\xa0\x18\xf4\x1d\xb6\xae\xcc\x47\x4f\x39\xac\x7d\x49\xc4\xda\x92\x54\xee\xc7\x31\x14\xd5\x09\x5c\x87\x99\x8f\x4f\x25\xcc\x94\x33\x54\x9c\x1e\x3c\x4d\xa3\x1b\xb6\xbb\x54\x4c\x5d\x3c\x09\xc6\x34\xba\x61\xed\x33\x17\xb8\x4e\xfb\x3c\x65\x62\x85\x2a\x66\x55\xb8\x59\x01\x8d\x23\xef\x2a\x29\x22\xce\xa2\x1b\x43\xf2\x58\xb7\x73\xaa\xc2\x68\x07\x4e\xad\x88\xd4\xe9\x85\x13\x1a\xe3\x0b\xb9\xe9\xf6\x08\xb8\x31\xc6\x96\x53\x61\x02\x5b\x64\x77\xe1\x74\x78\x16\xd3\x73\x8b\x42\x4b\x61\x42\x83\x88\x4b\x8d\x90\xe5\x9c\x97\x6d\xbb\x09\x21\x56\xbb\xb6\x1b\x4f\xc0\xfd\x0d\x8a\x5e\xb3\x66\x9e\xf0\xeb\xec\x38\xc1\xc4\x74\x2e\x95\xad\xfd\x01\xe5\x6c\x2a\x76\x21\x42\x9b\x85\x9b\x46\x0d\xcf\xa7\x98\x2e\x06\xda\x28\x29\xa6\xa3\xa3\x4f\x3f\xf3\x7d\xe0\xe8\x6f\xbf\xf0\xe0\xec\xde\x3b\xbf\xf4\xed\x60\xd0\x2f\xd6\x6c\x3b\x50\xd8\x38\xb8\x24\x62\x90\x13\xaf\x1b\x14\x32\xaf\xa4\xe2\x02\x83\x2c\xe0\xa3\xc7\x20\x85\x72\x19\x8d\x2d\xe1\x2e\x9c\xcd\xf6\x9b\xd4\x2a\xe3\xc2\xd5\x66\x87\x55\x4e\xcf\x9d\xe2\x5b\xfb\x3a\x00\xb3\x64\x95\xca\xf2\x80\xc6\xb1\x1d\x33\x37\xa6\x78\x24\x85\x96\x9b\xd2\xbb\xbd\xe2\x1d\xb3\xbf\xa7\x74\x9f\xa3\x98\x9a\x64\x48\xce\x9c\x3d\xbb\x55\x97\xaf\xf4\x77\xbd\xe8\xef\x04\x68\x6e\x64\x24\xd3\xcc\x22\xe2\x21\x91\x93\x89\xbf\x35\x91\x51\xae\x9b\xaa\x49\x73\x91\x29\xad\x5f\x48\xfb\x0c\x62\xec\x52\x77\xde\xcd\x6c\x68\xfa\x98\x84\x49\xf9\x70\xd4\xc6\x6d\xac\xb6\x72\xf0\x99\x47\xe5\x60\x9f\xc4\x86\x4e\xf5\x43\xf0\xa7\xeb\x4c\xa5\x37\x8b\x1f\x2d\xbe\x7c\xf2\x89\x8d\xd8\xec\xce\xed\x9f\xdf\xb9\xfd\x8f\xbb\xef\xbf\x76\xef\x93\x2f\x1b\x9d\xd7\x14\x0a\xc7\xf7\xa3\x93\xf3\x51\x79\xf1\x38\xe5\x0a\xda\xf1\x96\x0b\x86\x39\xbe\x2a\x0c\xcc\x36\x00\xae\x87\x06\xb0\xfe\xe7\x40\x55\x2b\x88\x5a\x64\x56\x69\xbb\xaf\xe9\xf8\xe3\xc6\xc3\xea\x26\x64\x54\x85\x62\x3a\x1f\xa7\xcc\x94\x59\x53\x1e\xe1\xd4\x8f\x16\xd2\x65\x6c\x76\xe7\xab\xf7\x0e\x3f\xf9\xcb\x66\x6c\xa6\xe9\x6c\x3b\x50\xd6\xd4\xde\x6a\x70\xac\xb6\x64\xb5\xfb\xcd\x11\x50\x05\xd0\x54\x16\x15\xe0\x03\x16\x38\xaa\x74\x8d\x41\x95\x32\x41\xf9\x5c\xed\x94\x32\x51\x83\x39\x15\x53\xb2\x74\xea\x92\x9f\x32\xb1\x92\x55\x03\x96\x4e\x41\xab\x68\x7e\xc6\xca\xd2\x69\xbf\xe4\x1f\x66\x62\x4a\x1a\x15\x2a\x2e\x2b\xf0\x8e\x73\xb8\x4e\x67\x54\x47\x8a\x65\x06\xfc\x97\x5e\xa8\x58\xde\xb7\x3b\xb5\x1d\x59\x5f\x7f\x39\x47\x75\xd0\x3f\x13\x9e\x0e\xbf\x5b\xfc\x70\xe7\xcb\xd7\xb5\xb3\xbf\xe3\x70\x0c\x76\xf5\x13\xf0\xeb\xf5\x13\xf6\x56\xbe\x0b\x95\x1f\xeb\xc6\x32\xca\x53\x14\xa6\x17\x2a\xa4\xf1\x41\x77\x92\x0b\x97\x77\xdd\x1e\xdc\x5c\x06\xd2\xfd\x3e\x5c\xf6\xef\x15\xf8\x01\xc4\x4c\xd3\x31\x47\x30\x09\x82\x3f\x60\x02\x1f\x39\x4b\x24\x16\x71\x2e\x1d\x3f\x75\x7a\x61\xa6\x64\xd6\xed\x14\xf4\x71\x67\x07\x6c\x00\xf6\xce\xd5\xf7\x0a\xbe\xe6\xa7\x2e\xba\xc5\xe7\x85\x10\x60\xa1\x16\xb8\x3c\xd3\xda\x96\x98\x19\xe5\x2c\xa6\x56\xeb\x1d\xc8\x50\xd9\x30\xd7\xa0\x65\x8a\xe0\xea\xaf\x06\x29\x9c\xa2\xb9\x46\xe5\x4f\x4e\x6a\x5a\x92\x53\x45\xd6\xf6\x42\x87\xb5\x17\x56\x44\x6b\xc6\x7a\x1d\xe8\xf7\xe1\x8a\xc2\x19\x0a\x03\x05\xfa\xf5\x23\xc3\x18\x13\x3a\x63\x32\x57\x2b\x14\x18\x66\x9e\xe0\xa2\x5f\xdf\xad\x1b\xac\x60\xfb\x2c\x16\xac\x32\xaa\x68\x8a\x06\x95\x06\x6a\x8c\x62\xe3\xdc\xd6\x61\xab\x7c\xa1\xa0\xad\xa5\x2c\x2a\x14\xdc\x01\xcb\x1c\xd8\x04\x28\xe7\x56\x55\x8d\xb0\xc7\x38\x87\x71\x61\x02\x8c\x41\xa3\x9a\xa1\x02\x37\xfe\x50\x0d\x7b\xc8\xf9\x8a\x04\x33\xaa\xe6\x43\xd0\xd0\xd9\xa5\x04\x74\xbd\x70\x46\xb9\x95\xba\x89\xc4\x9f\x4e\x78\x02\x8f\x19\xd6\x2e\x47\xa5\xa4\x82\x21\xb8\x23\xeb\x06\x3b\xb0\x09\x74\xe7\x52\x0c\x87\xd0\xe9\x34\x39\xc1\x99\xb5\xe0\x64\x43\x70\x75\xaf\xd2\xb7\x55\x90\xdd\x0b\x2d\x62\xb7\x75\xa7\x4b\x12\xaa\x03\xc7\x81\x34\x08\x5a\x12\xd7\x31\x62\x2f\xd4\x89\xdc\x6b\x52\xad\x9d\x22\x31\x29\xef\x92\x32\x7a\x99\x06\x4c\x33\x73\xd0\xb4\xeb\xad\x66\x6b\x14\x06\x7e\xa8\xb6\x38\x73\x7c\x5b\x2c\xe3\xac\xcd\x96\xa8\xaf\xf7\x76\x78\xce\x29\xf3\x00\x56\x38\xe9\x04\x6c\xd3\xff\xb1\x90\x5e\xa7\xfb\xdd\xe6\x87\xf6\x93\x2b\xbe\x0b\x95\x81\x2d\xcc\x92\x8c\xec\xb4\x2e\xb7\xfd\x7b\x17\xc8\x95\x17\xae\x5e\x5b\xb3\x2a\xa6\x86\xee\x3a\x65\x6b\x93\x60\x2f\xd4\xa8\x18\xe5\xec\x15\xec\xf6\xda\xe9\x8b\x77\x0c\xbb\x30\xaf\x38\x96\x63\x9b\x8e\x55\x6b\xd8\x75\x3e\x24\x0a\x1e\xad\x91\x51\xfd\xd8\x26\x30\x71\xc5\x30\x5a\x84\x63\xc1\x60\x92\xf3\x1d\x50\x38\x51\xa8\x93\xa5\x25\x1a\x0d\x94\x6f\x7c\x80\x33\x6d\x36\x6e\x63\x1b\xc7\xf2\xfb\x9d\x4e\x2f\xe4\x92\xc6\x5d\xb2\xfa\xda\xa7\x2d\xe4\xca\x4f\xfb\xb9\xf5\xad\xf5\x8e\xb9\xe6\x5c\xd8\xb1\x50\xad\xd3\xb8\xf0\x56\x53\x19\x2e\xe5\x3f\xc6\x51\x4b\x53\x08\xaf\xdd\xe7\xe1\xf7\xc7\x67\x8a\xf8\x01\x23\xc1\xe6\xa5\x73\x20\xa9\x9c\x6a\x11\xdf\x58\x8a\xd2\x6f\xbf\xad\xf8\x20\xed\xac\x92\x20\x8c\xe7\x8a\xad\x20\x80\x45\x64\x77\x56\xfa\x63\x53\xcc\x6d\x6f\xbc\xcb\xa2\x6e\xbb\x6f\xd8\x52\x51\xd1\x2f\x41\xe5\x02\x28\x10\x29\x10\x0c\x4b\x91\x94\x56\x5b\x31\xc6\xe2\xa4\x75\xd5\x18\xdf\x30\x58\xb8\x6a\xdd\x4c\x61\x8f\x32\x63\x87\xae\x14\xb5\xa6\xd3\xd5\x19\xd0\x4a\x5d\x22\xe6\x4e\x51\x84\x3b\x57\x94\x8c\x10\xdd\xe1\xd6\x1e\x33\x09\x1c\xc8\xdc\xcd\x6f\xa8\x4d\x18\x86\x9d\xff\x1b\x78\xb2\x3d\x96\xa0\x1c\x95\xe9\x92\xf9\x79\xa2\x3f\x72\x3a\x7c\xe3\x0f\x87\xaf\xfe\xde\x1f\x9d\x87\x61\xd8\x56\xaa\x70\x9f\xb5\x94\x81\x55\x77\xac\xeb\x53\xbe\x47\x95\x5a\x35\x57\xb7\xcd\x8d\x69\xd1\x94\x6a\xaf\x48\xb7\x68\x4a\xc7\x6f\x48\x1b\x5b\x8a\x3f\x45\x70\x2b\xca\x38\x84\x98\xcd\x5a\x19\x36\x05\xac\x13\xa2\xd9\xf6\x2d\x4d\xa0\xd2\x00\x2c\x87\xd5\x06\x70\xeb\x9b\x2f\x3d\x2f\x6a\x6f\x86\x1f\xfc\xd0\x0e\x8f\xd0\x91\x82\x40\x8a\x26\x91\xee\x9d\x43\x79\xec\xe2\x06\xb4\x29\x0a\x54\xd4\x60\x0c\xdf\xbf\xf6\xfc\x73\x80\x1c\xed\x94\xa7\x57\xea\xd1\x4a\x97\x95\xa2\xdb\x71\x75\xa9\xb3\x03\x1d\xfa\x13\xf7\x0f\x26\x85\x63\x02\x16\xbf\xd4\xd9\x81\xb5\xc5\xfb\x91\xd7\x95\x3a\x9b\x4a\x52\x5f\xbe\xe8\xd2\xda\x24\x4c\xf7\x42\x5b\x57\xba\xa4\x26\x3e\x69\x2a\x4c\x4d\x53\xaa\xa3\xee\x38\x6a\xff\x28\x60\x76\x56\x9d\x6f\xd4\x20\xc8\x56\xc3\xae\x9b\x59\x5a\xaa\xe3\x85\x84\x8a\xa9\xad\x6c\x22\xb6\xfd\x97\x19\x3b\x5f\xcb\xa5\xcc\x30\xd2\x76\x9a\x15\x62\x4f\x12\x96\xb3\x7c\xe8\x69\x17\xb6\xb0\x08\xa6\xb1\x0b\x6c\x51\x4c\x16\x25\xc0\x62\xad\xf3\x73\x0b\x0c\x09\x3c\xbe\xb0\xc7\xda\x52\xf3\xec\xa5\xb6\x4a\xf3\x6d\xb5\xa8\x28\xf6\xb0\xab\xc5\x45\x7f\x2e\x43\x17\xef\x25\x95\x4c\x9d\x61\x34\xd6\x4f\x30\x56\x43\x77\x0b\xa0\xb6\x45\xea\xcd\x93\xa7\xa9\xf3\x2d\xcf\xfe\xab\xc5\x66\xd8\xa9\x86\x18\x3c\x0e\x9d\x97\x3a\x6b\x82\xd9\xf7\x6a\x31\x61\x2a\xed\x92\x42\xf9\x52\x75\x1b\xac\x7e\xab\xc7\x81\xfc\x54\x3c\xa5\xd0\x95\x96\xab\x2f\xfe\xe8\x12\x9c\x27\xbd\xaf\x39\x14\x2e\xd9\xee\xf8\x69\x02\xdb\xa4\x0a\x7c\x3b\xed\xcd\xa7\xbd\x6d\x04\xbf\xb8\xd5\x09\x65\x9b\x38\x5b\xf6\x83\x8e\x90\x02\x9b\xba\xd2\x36\x3c\xb7\x3a\x09\xad\x7f\x1e\xed\x30\xbb\x7e\xb7\xea\x8a\xf2\x7a\x71\xc0\x3c\xe8\x17\xff\x93\x3c\xe8\xbb\x7f\x62\xff\x6f\x00\x00\x00\xff\xff\x56\x79\xb8\xed\xdb\x2e\x00\x00")

func templatesCommandHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandHtml,
		"templates/command.html",
	)
}

func templatesCommandHtml() (*asset, error) {
	bytes, err := templatesCommandHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/command.html", size: 11995, mode: os.FileMode(420), modTime: time.Unix(1509329128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6d\x6f\xdb\x36\x10\xfe\x1e\x20\xff\xe1\xaa\x16\x93\xd3\x5a\xa2\xdd\x05\x6b\xe1\xda\xfe\xb0\xbe\x00\x7d\x41\xdb\x2d\xc9\x80\x61\x28\x86\xb3\x78\x96\xe8\x50\xa4\x46\x52\x7e\x69\xd1\xff\x3e\x90\x92\x6d\x39\x31\xb6\x0c\x99\xbf\x98\xbc\x97\x87\x0f\x9f\xbb\x93\x34\x7e\xf0\xea\xd3\xcb\xcb\xdf\x3f\xbf\x86\xc2\x95\x72\x7a\x7a\x32\x7e\x90\x24\x60\x48\x12\x5a\x82\xe5\x79\x7a\x9e\xfe\xd4\x87\x4c\x57\x1b\x23\xf2\xc2\xc1\xd3\xc1\xf0\x1c\x12\xff\xf7\x0c\xde\xa3\x71\xe2\x1a\x7e\x13\x76\x45\x76\x85\x06\x15\x24\x49\x0b\x61\xeb\xaa\x32\x64\x2d\xbc\xbb\xb8\x52\x86\xac\x96\x4b\xe2\x1f\xc4\xcc\xa0\xd9\x5c\xfd\xfa\xa1\x0d\xf4\x67\x82\x44\x95\x4f\xa2\x4c\x45\xd3\xd3\x13\x6f\x23\xe4\xd3\xd3\x13\x00\x80\x71\x49\x0e\x21\x2b\xd0\x58\x72\x93\xe8\xea\xf2\x4d\xf2\x3c\x02\xb6\xf5\x3a\xe1\x24\x4d\xdf\x1b\x5c\x10\xc1\xbb\x5f\x6a\x32\x1b\xf8\x2c\xeb\x5c\x28\x0b\x09\xfc\xe0\x49\xbf\x68\x49\x8e\x59\x13\xdc\x66\x4a\xa1\xae\xa1\x30\x34\x9f\x44\x85\x73\x95\x1d\x31\x56\xe2\x3a\xe3\x2a\x9d\x69\xed\xac\x33\x58\xf9\x4d\xa6\x4b\xb6\x33\xb0\xf3\x74\x90\x0e\x92\x19\x39\x64\x99\xb5\x7b\x47\x5a\x0a\x95\x66\xd6\x46\x5e\xb6\x49\x64\xdd\x46\x92\x2d\x88\x5c\x74\xe4\x38\xeb\xd0\x89\x2c\x00\xcc\x85\x24\xa1\xaa\xda\xed\x01\x4a\xe2\x02\x27\x11\x4a\x79\x1b\x0c\xdc\xa6\xa2\x49\xe4\x68\xed\x58\x08\x66\xff\x70\x9b\x8c\xab\x85\x4d\x33\xa9\x6b\x3e\x97\x68\x28\x5c\x05\x17\xb8\x66\x52\xcc\x2c\x9b\x6b\xe5\x12\x5c\x91\xd5\x25\xb1\xf3\xf4\x59\x3a\x68\x18\x75\xcc\xf7\x25\x65\x33\x23\x2a\x07\xd6\x64\x1d\x56\x9a\x53\xba\xf8\xcb\x17\x2a\x10\x6a\x96\xc9\x8f\xe9\xd3\x74\x18\xce\x5b\xd8\x68\x3a\x66\x4d\xea\x31\xa0\x56\xbd\x85\x65\x55\x53\x67\x66\xb5\x71\x38\x93\xb4\x4d\xef\x12\x5a\xe0\x12\x9b\xec\xbb\xa2\x1e\x96\xe4\xde\x70\x52\x67\x28\xc9\xb2\xaf\xc5\x3d\xb1\x5c\x41\x25\x59\x36\xc7\x66\x75\x1f\x76\x77\xec\x90\x4a\x57\x15\x99\x74\x61\xd9\x30\x1d\x0e\xd3\x01\xab\x4b\xbe\x35\xfe\x0f\xa7\xff\xa7\x69\x5b\xdc\x1c\xb6\xbb\x1d\x3e\x66\xed\xa3\xe4\xf4\x64\x3c\xd3\x7c\xb3\xe5\xc3\xc5\x12\x32\x89\xd6\x4e\xa2\x4c\x2b\x87\x42\x91\x81\xeb\x65\x52\xa2\x50\xdb\x91\xbd\x19\x58\x61\x4e\x89\x87\x23\xd3\x0d\x09\x61\xc5\x70\xfa\xf3\x96\x1e\xbc\x11\x92\xe0\xad\x6f\x21\x78\xbd\xc6\xb2\x92\x74\x18\xdd\x28\x52\xa2\x94\xd3\x31\xde\x18\xda\x5c\xb8\xa2\x9e\x05\x1d\xae\xc3\x53\x2b\x59\xee\x2f\x9e\xec\x7a\x33\xb1\x01\xd7\x8f\x8a\xb8\x0d\xee\x7f\x2d\xe9\x5c\x6e\xaa\x42\x64\x5a\xc1\x6e\x95\x70\xbd\x52\x52\x23\xf7\x4a\x89\x29\xbc\x6a\xb7\x70\x11\x30\x03\x7d\x3b\x66\xe8\x75\x0c\x24\x6f\xdc\x95\x15\xc3\xae\x42\x8c\x8b\x65\x10\x78\x2f\x86\xe9\xfa\xe7\xda\x94\x50\x92\x2b\x34\x9f\x7c\xfe\x74\x71\x09\x98\x39\xa1\xd5\x84\xd5\x55\x38\x95\x54\xd6\xd4\xb1\xac\xa5\x13\x15\x1a\xc7\x7c\x4a\xc2\xd1\xe1\x2d\x9d\x3b\xe5\x08\x41\xb9\xd1\x75\x75\x33\xea\x56\xa4\x90\x94\xf8\xb3\x84\xca\x8f\xc5\x86\xf8\x20\x2b\x08\xde\x86\x0f\xb7\xdd\xe5\x77\x11\x34\xdc\x24\x75\x21\x23\xf0\x14\x13\xbd\x24\xb3\x32\xc2\x51\x22\x94\x70\x02\xe5\x24\x9a\xa3\xb4\x5b\x77\x29\x54\x28\x5b\x92\xe9\x5a\xb9\x49\x34\x3c\xca\xb6\x15\xf1\x5f\x6d\x87\xd2\x06\xa1\x76\xda\x6f\x13\xc6\xac\xed\xf4\xf1\xc1\x0c\x3e\xea\x45\x0f\xdb\xab\x9d\xa5\xbb\x46\xea\x7d\xdb\xe3\x85\xe7\xca\x08\xe2\x39\xc6\xfd\xbd\xd5\xbf\x9a\x6b\xcc\xbd\xe3\x6b\xd1\x75\x34\xf5\xbb\x32\x72\x04\xb1\x6f\xdf\x11\x63\xc3\xa7\xcf\xfc\xc8\xa6\xc3\xd1\xf3\xc1\xf3\x01\xcb\x74\x59\xa2\xe2\x71\x1f\x18\x83\x8d\xae\xa1\xac\xad\x03\x4b\x0e\x10\x96\x28\x05\x07\xff\x19\x50\x90\x21\x20\x69\x29\x84\xac\x84\x94\x90\xfb\x10\x05\x64\x8c\x36\xfb\x03\x19\x03\x94\x52\xaf\x88\xfb\x16\x7d\xbd\x76\xa4\xac\xd0\xca\x8e\xe0\x8f\x78\x51\xe5\x71\x1f\xe2\x4a\x85\xbf\x5c\xcc\xe3\x2f\x1d\xaa\xbb\x1a\xbd\x6d\x4a\x34\x82\x50\xa2\xfe\x01\x76\x89\x6b\x8f\x7b\x21\xbe\xd2\x08\x86\x83\xc1\xa0\xe3\x6e\x7d\xf6\x63\x5d\x7a\xdf\x41\x62\x87\xd3\xe5\xa6\xa2\x40\x47\x94\x98\x93\x67\xb2\x14\x9c\xb4\x5f\xcc\x25\xda\xe2\x80\x94\x95\x75\xfe\x12\xa5\x9c\x61\x76\x3d\x82\x79\xad\xc2\x5c\xf4\x7c\x69\x14\x96\x74\x06\xdf\x0e\x8b\x6f\xc8\xd5\x46\xc1\xd6\x9f\x1a\xaa\x24\x66\xd4\x8b\x7b\x1e\xff\xcf\xf8\x6c\x6f\xf9\xd2\x5a\x5e\xec\x11\xbe\x37\xcb\xef\x5b\x1b\x7b\xdc\xfa\x1e\xf5\xa2\xd0\x0e\xd1\x59\xaa\x55\x2f\xf6\x4b\x4b\x92\x32\x17\xf7\xf7\xa4\x68\x49\xca\xf5\x41\xf5\x41\xee\x79\xa1\x24\xe3\x7a\x71\x78\xdc\x5d\x84\x14\xe2\x29\x7c\xc4\xd0\x44\xf0\x04\x24\x3c\x81\xb8\x0f\x41\x33\xbf\x57\x3b\x3e\x3b\x16\xf0\x98\xdd\xa6\xf3\xd0\x91\x75\x49\xd3\x5e\x1d\x56\x7e\x4b\xfc\x08\x2b\xef\xec\x43\x65\x68\x29\x68\xf5\x96\xf7\x41\x28\x4e\xeb\x5b\x3c\x05\x4c\x02\x8d\xe0\x6d\xa8\x09\xde\xda\x76\xc9\x8d\xdd\x23\xb6\x1e\xbf\x4c\x43\x3d\x8e\x93\xef\xbc\x6c\xc2\xeb\xc6\x7f\x41\xff\x1d\x00\x00\xff\xff\xcf\x03\x80\x34\x51\x0b\x00\x00")

func templatesUploadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadHtml,
		"templates/upload.html",
	)
}

func templatesUploadHtml() (*asset, error) {
	bytes, err := templatesUploadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload.html", size: 2897, mode: os.FileMode(493), modTime: time.Unix(1509369765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/command.html": templatesCommandHtml,
	"templates/upload.html": templatesUploadHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"command.html": &bintree{templatesCommandHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"upload.html": &bintree{templatesUploadHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

