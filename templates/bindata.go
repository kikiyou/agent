// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\x1c\x45\x10\xbd\xfb\x57\x94\xe7\xb2\x07\xdc\x3b\x8b\xe2\x44\xc1\xcc\x2c\x42\xb1\x21\x46\xb6\x12\x81\x39\xa0\x28\x87\xde\xee\xda\xed\x76\x7a\xba\x87\xae\x9a\x5d\xaf\xc4\x81\x0b\x1c\x82\x40\x70\x88\x10\x22\x42\x42\x42\x82\x13\x12\x12\x42\xe2\x43\xca\x9f\xc1\x76\x7e\x06\xea\x99\x5d\x7b\x63\x83\x48\xe4\xec\x65\xfb\xe3\xf5\x7b\xaf\x6b\xde\xd4\x14\xeb\xdb\x77\x6e\x1d\x7c\x70\x77\x07\x0c\x57\x6e\xb8\x56\xa4\x3f\x70\xd2\x4f\xca\x4c\xf9\x0c\xfc\x44\xc8\xba\x2e\x33\x67\x7d\x73\xb4\x2d\xc9\x64\xc3\xb5\xb5\xc2\xa0\xd4\xc3\x35\x00\x80\xa2\x42\x96\x60\x98\x6b\x81\x1f\x36\x76\x5a\x66\xb7\x82\x67\xf4\x2c\x0e\xe6\x35\x66\xa0\xba\x59\x99\x31\x1e\x71\x9e\xc8\x5f\x07\x65\x64\x24\xe4\xf2\xfd\x83\xb7\xc4\xcd\x6c\xc1\xc3\x96\x1d\x0e\x4f\x1e\x7f\x7e\xfc\xf0\xfb\xe3\x6f\x7e\x3a\xfd\xf6\xab\x93\x2f\x7e\x3c\xfe\xf9\xbb\x93\xaf\x7f\x3b\xfe\xe5\xd1\xe9\x0f\x7f\x14\x79\x07\x59\x91\xf5\xb2\xc2\x32\x9b\x5a\x9c\xd5\x21\xf2\x8a\xd8\xcc\x6a\x36\xa5\xc6\xa9\x55\x28\xda\xc9\x06\x58\x6f\xd9\x4a\x27\x48\x49\x87\xe5\xab\xfd\x41\x76\x99\x4a\x23\xa9\x68\x6b\xb6\xc1\xaf\xb0\xed\x07\x6f\x39\x44\x98\x87\x26\xc2\x5e\x2a\x04\x10\xc6\x29\x46\x60\x13\x43\x33\x31\x20\x81\x6c\x55\x3b\x84\x19\x8e\x40\x4b\x32\xa3\x20\xa3\xee\xc3\x9d\x1a\x3d\x50\x68\xa2\x42\x90\x5e\xc3\x38\x22\xae\xff\x8b\xae\xac\x6b\x87\xa2\x0a\x23\xeb\x50\xcc\x70\x94\x6a\x2e\x94\xac\xe5\xc8\xad\xd6\x70\x8e\xb4\x3c\xec\xac\x7f\x00\x11\x5d\x99\x91\x09\x91\x55\xc3\x60\x55\x72\x6d\x22\x8e\xcb\x8c\x58\xb2\x55\xf9\x58\x4e\xd3\x6a\xdf\xaa\x90\x01\xcf\x6b\x2c\x33\x5b\xc9\x09\xe6\x47\xa2\x45\x5f\x22\x5b\xe5\x78\x91\xc3\xed\x89\x5e\x9e\x8f\x83\x67\xea\x4f\x42\x98\x38\x94\xb5\xa5\xbe\x0a\x55\xae\x88\xde\x18\xcb\xca\xba\x79\xb9\x8f\x31\xda\x19\x4a\x36\x18\xb7\xae\x0d\x06\x96\xa5\xb3\x6a\xe3\xda\x60\xf0\x51\xaa\xd5\x2b\xef\x49\x4f\x5b\x9b\x83\xc1\xc6\x8d\xc1\xa0\xd7\x5a\xea\x11\xcf\x1d\x92\x41\xe4\x5e\xe7\xa2\xd7\x46\x49\x11\xf5\x2e\xd7\xe2\x0c\xbb\x74\xbc\xc4\x5e\x28\x8c\x22\xca\x2b\x69\x7d\x3f\x6d\x5d\x8d\x86\x0d\x56\x48\x2f\x81\x48\x7a\x5b\x49\xc6\x05\x53\x47\xb5\x2e\x04\xbc\xe9\x27\x8d\x93\x29\x79\x23\x02\x21\x16\x22\x5d\x50\x81\xa2\x3a\x23\x39\x4c\x1c\x2d\xb6\x5f\x59\xdf\x3f\xa4\x67\x44\x0f\xe5\x54\x76\x87\xb2\x61\x91\x77\xa3\xe7\xe1\x12\x31\x34\x8c\x2f\xc0\x96\x3c\xef\x21\xdc\x3e\xd8\xdf\xbb\x0e\x64\x6c\xb5\x01\xe3\x10\x61\x77\xe7\x86\xb8\x09\xd4\xd4\xe9\x5d\x85\x30\x5e\x00\xd0\x61\x85\x9e\x57\x6e\xb6\x2e\xc4\x3d\x3b\x06\xc7\xb0\xbb\x03\xaf\xdd\xef\x56\xbb\xdf\x33\x4e\x53\xd3\xa1\xad\xbc\x6d\x2a\xd7\x93\xce\x22\x77\x2a\x68\x6c\x73\x47\x53\x9f\x73\x6c\xfc\x83\x0e\x92\xae\x70\xc1\x6b\xa7\x77\x0f\xbd\xb6\xe3\xfb\xc9\x40\x91\x77\xad\x6d\xad\x18\x05\x3d\x5f\x3e\x05\x6d\xa7\xa0\x9c\x24\x2a\x33\x83\x31\x64\x2b\x87\xcd\xe6\x72\xa7\xed\x4e\xd9\xf0\xe9\x93\x2f\x4f\xff\xfc\xf5\xef\xdf\x3f\x3b\x7d\xfc\x57\x91\x9b\xcd\x15\x2c\x55\xd2\xb9\xe1\xf1\xa3\x87\xa7\x4f\x3e\x79\xfa\xe9\xc7\x1b\x70\x36\x2c\xf2\x6e\xef\x1c\xdb\xa6\x4a\xd0\xcc\xb2\x32\x18\x87\x45\x7e\x61\xe1\x1c\xe9\xe5\x54\x8c\x64\x82\x2c\x47\x9d\xe9\x5c\xdb\xe9\x6a\x8c\x0e\xb0\xaa\x9d\x64\x24\x78\x1b\x19\xde\x45\xaf\x31\xa2\x86\xdb\x18\xf1\xbc\xf6\xe9\xa6\x56\x97\x59\xed\x9a\x89\xf5\x94\x2d\x2f\xb7\xc8\xa6\x86\xb1\xd4\xb8\xeb\xb7\xc3\xac\xfb\x36\xa4\xde\xfb\x1f\x7a\xef\x9c\x25\x64\xf5\xc9\xc2\x5d\x27\x15\x6a\x90\x0c\x6c\x10\xd0\xeb\x14\x85\x34\xd4\x41\x35\x29\x09\x40\xa1\x9d\xd7\x72\x82\x04\x2e\xc8\x24\x4a\x8c\xf1\xff\xb2\x7f\xf6\x89\xba\x72\xf2\xab\xa0\x1b\x87\x74\x65\x1e\xaa\x42\x60\x63\xf1\xf9\x5f\xc7\x22\x5f\xe4\xae\x68\x33\x3b\xfc\x27\x00\x00\xff\xff\xb5\xd6\x44\x21\x9f\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1951, mode: os.FileMode(436), modTime: time.Unix(1508483275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

