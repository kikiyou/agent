// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/command.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x6b\x24\x45\x14\x7d\xcf\xaf\xb8\xe9\x97\x79\x30\x35\x3d\xb2\xd9\x65\x8d\xdd\x23\xb2\x89\x6e\x24\x61\x17\x1d\x11\x59\xf6\xe1\x4e\xd5\x9d\xa9\x4a\xaa\xab\xda\xba\xd5\x33\x19\xf0\x17\x28\x8a\x3e\x88\x88\x8b\x20\x08\xfa\x24\x08\x22\xf8\x01\xfe\x19\x93\xf8\x33\xa4\xba\x67\x92\xd9\x44\x71\x97\x6c\xbf\x74\x55\xf5\xa9\x73\x4e\xdd\x3e\x7d\xbb\xd8\xdc\x7d\x70\x6f\xf4\xfe\xc3\x3d\xd0\xb1\xb2\xc3\x8d\x22\xdd\xc0\xa2\x9b\x96\x99\x74\x19\xb8\xa9\xc0\xba\x2e\x33\x6b\x5c\x73\xb2\x8b\xac\xb3\xe1\xc6\x46\xa1\x09\xd5\x70\x03\x00\xa0\xa8\x28\x22\xe8\x18\x6b\x41\x1f\x34\x66\x56\x66\xf7\xbc\x8b\xe4\xa2\x18\x2d\x6a\xca\x40\x76\xb3\x32\x8b\x74\x12\xf3\x44\xfe\x2a\x48\x8d\x81\x29\x96\xef\x8e\xde\x10\x77\xb3\x25\x4f\x34\xd1\xd2\xf0\xec\xc9\x27\xa7\x1f\x7d\x7b\xfa\xd5\x0f\xe7\x5f\x7f\x7e\xf6\xe9\xf7\xa7\x3f\x7e\x73\xf6\xe5\x2f\xa7\x3f\x7d\x71\xfe\xdd\x6f\x45\xde\x41\xd6\x64\x1d\x56\x54\x66\x33\x43\xf3\xda\x87\xb8\x26\x36\x37\x2a\xea\x52\xd1\xcc\x48\x12\xed\x64\x0b\x8c\x33\xd1\xa0\x15\x2c\xd1\x52\xf9\x72\x7f\x90\x5d\xa7\x52\xc4\x32\x98\x3a\x1a\xef\xd6\xd8\x0e\xbd\x33\xd1\x07\x58\xf8\x26\xc0\x41\x2a\x04\x30\x85\x19\x05\x88\x3a\xf8\x66\xaa\x01\x81\x4d\x55\x5b\x82\x39\x8d\x41\x21\xeb\xb1\xc7\xa0\xfa\xf0\xa0\x26\x07\xec\x9b\x20\x09\xd0\x29\x98\x04\xa2\xcd\x7f\xd1\xc5\xba\xb6\x24\x2a\x3f\x36\x96\xc4\x9c\xc6\xa9\xe6\x42\x62\x8d\x63\xbb\x5e\xc3\x05\xf1\x6a\xb3\x35\xee\x18\x02\xd9\x32\x63\xed\x43\x94\x4d\x04\x23\x93\x6b\x1d\x68\x52\x66\x1c\x31\x1a\x99\x4f\x70\x96\x56\xfb\x46\xfa\x0c\xe2\xa2\xa6\x32\x33\x15\x4e\x29\x3f\x11\x2d\xfa\x1a\xd9\x3a\xc7\xf3\x6c\x6e\x77\xf4\xf2\x7c\xe2\x5d\xe4\xfe\xd4\xfb\xa9\x25\xac\x0d\xf7\xa5\xaf\x72\xc9\xfc\xda\x04\x2b\x63\x17\xe5\x21\x85\x60\xe6\x84\x51\x53\xd8\xb9\x35\x18\x98\x88\xd6\xc8\xad\x5b\x83\xc1\x87\xa9\x56\x2f\xbd\x83\x8e\x77\xb6\x07\x83\xad\x3b\x83\x41\xaf\xb5\xd4\xe3\xb8\xb0\xc4\x9a\x28\xf6\x3a\x17\xbd\x36\x4a\x92\xb9\x77\xbd\x16\x17\xd8\x95\xe3\x15\xf6\x4a\x61\x24\x73\x5e\xa1\x71\xfd\xf4\xe8\x66\x34\x51\x53\x45\xfc\x02\x88\xd0\x99\x0a\x23\x2d\x99\x3a\xaa\x4d\x21\xe0\x75\x37\x6d\x2c\xa6\xe4\x8d\x19\x84\x58\x8a\x74\x41\x05\x0e\xf2\x82\xe4\x28\x71\xb4\xd8\x7e\x65\x5c\xff\x88\x9f\x12\x3d\xc2\x19\x76\x9b\xb2\x61\x91\x77\xa3\x67\xe1\x12\xc1\x37\x91\x9e\x83\x2d\x79\x3e\x20\xb8\x3f\x3a\x3c\xb8\x0d\xac\x4d\xb5\x05\x13\x1f\x60\x7f\xef\x8e\xb8\x0b\xdc\xd4\xe9\x5b\x05\x3f\x59\x02\xc8\x52\x45\x2e\xae\x9d\x6c\x53\x88\x47\x66\x02\x36\xc2\xfe\x1e\xbc\xf2\xb8\x5b\xed\xae\xa7\x9c\xa6\xa6\xc3\x3b\x79\xdb\x54\x6e\x27\x9d\x65\xee\xa4\x57\xd4\xe6\x8e\x67\x2e\x8f\xa1\x71\xc7\x1d\x24\x1d\xe1\x8a\xd7\x4e\xef\x11\x39\x65\x26\x8f\x93\x81\x22\xef\x5a\xdb\x46\x31\xf6\x6a\xb1\x7a\x0b\xca\xcc\x40\x5a\x64\x2e\x33\x4d\xc1\x67\x6b\x9b\xf5\xf6\xea\x49\xdb\x9d\xb2\xe1\xdf\x7f\x7e\x76\xfe\xfb\xcf\x7f\xfd\xfa\xf1\xf9\x93\x3f\x8a\x5c\x6f\xaf\x61\xb9\x42\x6b\x87\xef\xa1\x3d\xa6\xb0\x05\xdd\xbd\xc8\xbb\xd5\x4b\x54\x9b\x27\xc1\x73\x13\xa5\xa6\x30\x2c\xf2\x2b\x0b\x97\x48\x87\x33\x31\xc6\x04\x59\x8d\x3a\xbb\xb9\x32\xb3\xf5\x00\x8d\xa8\xaa\x2d\x46\x62\x78\x93\x22\xbc\x4d\x4e\x51\x20\x05\xf7\x29\xd0\x65\xd5\xd3\x19\x8d\x2a\xb3\xda\x36\x53\xe3\x38\x5b\x1d\x6b\x99\x4a\x05\x13\x54\xb4\xef\x76\xfd\xbc\xfb\x2b\xa4\xae\xfb\x1f\x7a\x6f\x5d\x64\x63\xfd\x9d\xc2\x43\x8b\x92\x14\x60\x84\xa8\x09\xc8\xa9\x14\x82\x34\x54\x5e\x36\x29\x03\xc0\xbe\x9d\xd7\x38\x25\x06\xeb\x31\x89\x72\xa4\xf0\x7f\xa9\xbf\xf8\x39\xdd\x38\xf3\x95\x57\x8d\x25\xbe\x31\x0f\x57\xde\x47\x6d\xe8\xd9\x3f\xc4\x22\x5f\x26\xae\x68\xd3\x3a\xfc\x27\x00\x00\xff\xff\xbf\x24\xc2\x49\x99\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1945, mode: os.FileMode(436), modTime: time.Unix(1509190076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommandHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\xdd\x8f\x1c\xc5\xb5\x7f\x9e\xf9\x2b\x0e\x65\x74\x7b\x46\xde\xee\xc1\xe6\xfa\x3e\xac\x67\xc6\x02\xdb\x70\x7d\x05\xc2\xf7\xda\x3c\x5c\x25\x28\xaa\xe9\x3e\x33\x5d\x76\x75\x55\x53\x55\x3d\xbb\xcb\x6a\xa5\x44\x4a\x20\x1f\x24\x02\x25\x11\x01\x82\x04\x12\x24\x28\x12\xe1\x11\x47\x04\xf8\x67\xbc\xf6\xfa\x29\xff\x42\x54\x1f\xdd\xf3\xbd\xbb\x06\x5b\x0a\x8a\x25\xef\xf4\x74\x9d\x73\xea\x7c\x9f\x5f\xd5\x6e\xff\x89\x2b\x2f\x5d\xbe\xf9\xff\xd7\xaf\x42\x6e\x0a\x3e\x6c\xf7\xeb\x0f\xa4\xd9\xb0\xdd\x2f\xd0\x50\x10\xb4\xc0\x01\x99\x32\xdc\x29\xa5\x32\x04\x52\x29\x0c\x0a\x33\x20\x3b\x2c\x33\xf9\x20\xc3\x29\x4b\x31\x76\x5f\xb6\x80\x09\x66\x18\xe5\xb1\x4e\x29\xc7\xc1\x39\x32\x6c\xf7\x0d\x33\x1c\x87\x0f\xbe\x7c\xfb\xde\x7b\xef\xdc\xfd\xdb\xaf\x1e\xbc\xf3\x69\xbf\xe7\xdf\xb5\xfb\x4f\xc4\x31\x3c\x2b\xa5\xd1\x46\xd1\x12\xe2\x78\xd8\xee\x73\x26\x6e\x83\x42\x3e\x20\xda\xec\x71\xd4\x39\xa2\x21\x90\x2b\x1c\x0f\x48\x6e\x4c\xa9\xb7\x7b\xbd\x34\x13\xc9\x48\x4a\x93\x6a\x9d\xa4\xb2\xe8\x8d\x6a\x11\xbd\xa7\x93\xa7\x93\x0b\xbd\x54\xeb\xd9\xbb\xa4\x60\x22\x49\xb5\x26\x8f\x43\x78\x6c\x72\x2c\xf0\xb4\x5b\x68\x43\x0d\x4b\x9d\x84\xb1\x14\x26\xa6\x3b\xa8\xe5\xb7\x62\x77\x8b\x35\x4f\x2f\x84\x6b\x24\xb3\xbd\x61\xbb\xdd\xa7\x9a\x65\x08\x29\xa7\x5a\x0f\x08\xc7\xb1\x89\x4b\x2a\x90\x93\xe0\xf0\x1b\x4e\x0c\x08\x3a\x1d\x51\xe5\x9d\x2e\xe8\xb4\xa6\x0f\xaf\xfd\x47\xec\xb7\x8c\x8d\x2c\xeb\x37\x4c\x4c\x51\x69\x24\xc3\x36\x2c\xfc\xeb\x67\x6c\x49\x46\x6c\xd5\x42\xb5\x42\x09\xd0\xd7\x25\x15\x4b\xc4\x23\x45\x45\x06\xee\x67\xec\xd2\x83\x2c\xe6\xcc\x3c\xcb\xc8\x7a\x89\x89\x49\x9c\x56\x4a\x4b\x45\x86\xff\x71\x66\xf7\xfc\x05\x8a\x17\xfb\x3d\x4b\x36\x0c\x1f\x0b\xfb\xf6\x7b\x19\x9b\x2e\xbd\xb2\x2a\xb3\xac\x56\x81\x2c\x69\x94\x4a\xce\x69\xa9\x11\xea\x87\x25\x4b\xfa\x15\x9f\xe3\xa8\xfd\x23\xe8\x74\x9d\xc5\x9c\xd5\xb4\x99\x92\x65\x26\x77\xc4\x1a\x2a\x47\x49\x43\xb4\xcf\x90\x65\x8e\xd8\xc8\xc9\x84\x23\x81\x8c\x1a\x1a\xbe\xcc\xc9\x03\x25\xed\xf7\x51\x65\x8c\x14\x04\xa8\x62\x34\xce\xa9\x2e\x65\x59\x95\x03\x62\x54\x85\xe1\x25\xee\x96\x54\x64\x98\x0d\xc8\x98\x72\x6b\xd6\xe1\x9d\x3b\xf7\x7f\xf7\xe9\xe1\xdb\x5f\xdd\xfd\xf2\xe3\x07\xef\xbf\xbe\x18\x9f\x94\x2a\x34\x64\xd8\xb8\x96\x6e\xd0\xbb\xe2\xce\x97\x9c\x69\x73\x59\x16\x05\x15\xd9\x0d\x9b\xba\xcb\x36\x14\x28\xaa\x0d\xa6\x3b\x31\x36\x43\x2f\x95\x79\x09\x0a\x5f\xad\x98\xc2\x1f\x49\x91\x62\x27\x5a\x14\x9b\x94\x79\x19\x75\x2f\xc2\x25\x9b\xbd\x6b\xc5\xf4\x2a\xbe\x26\x0a\x3d\xce\x56\xf2\xb6\xa1\x5c\x5e\xf0\x8e\x74\x46\xd1\x2c\x0b\x9b\x37\x06\x8d\x8c\x80\x91\x11\xb1\xae\xd2\x14\xb5\xae\xc3\x3f\x32\x82\x0c\xef\x7d\xf1\xe5\xe1\x2f\x3f\x5c\x74\xe3\x84\xef\x95\x39\x4b\xa5\x80\xe6\x29\x2e\x79\xa5\x63\xcd\x26\x4d\xb4\x58\x96\xa1\x08\xb1\x9a\x79\xdc\x2b\xb2\xa2\xf8\x9c\x7e\x19\x72\x34\xb8\x49\xc5\x8c\x8a\x09\xaa\x05\x0d\x0f\x7f\xfe\xe1\x83\x77\x3f\x3e\x59\x43\xa3\xa8\xce\xbf\x95\x76\x9b\x8a\xa3\x7e\x54\x6c\x92\x9b\xb5\x89\xb0\xa6\x93\x8c\xa5\x2a\x6a\x46\xdb\xd0\x36\x25\x50\xdf\x11\x5a\x8f\xa8\x4a\x04\x77\x3c\x27\x55\xd1\xb8\xc4\xae\xc7\x13\x25\xab\xf2\x98\x1c\x84\xfd\x7d\x36\x86\x24\xc3\x31\xad\xb8\xb9\x4e\x4d\x7e\x70\xb0\x39\x61\x39\x1d\x21\x5f\xd2\xd7\xe0\xae\x21\xc3\x7b\xbf\xf8\xf3\xd1\x47\x6f\xde\x7f\xff\xaf\x87\x5f\xfd\xfe\x1f\x7f\x7f\xaf\xdf\x73\xa4\xc7\xe4\x3e\x13\x65\x65\x9c\xfa\x25\x35\x39\x09\xa3\xd7\x3f\x9b\xbd\x12\x07\xc4\x09\x5e\x30\xc6\x8e\x63\x25\x39\x38\xde\x58\x17\x04\x34\x7b\x0d\x07\xe4\xfc\x53\x64\x4a\x79\x85\x03\xb2\xbf\xbf\x68\xca\x31\x96\xef\xef\xa3\xc8\x8e\x33\x76\x74\x8c\xd7\x9a\xc6\x3e\x4c\x00\x92\x75\x3d\x78\x83\xb1\x69\x9d\xb7\xde\xde\xe6\xeb\xbc\xc9\xde\xa8\xff\x7a\x6a\xad\xf1\x04\x4a\x4e\x53\xcc\x25\xcf\x50\x0d\xc8\xd1\xe7\x5f\x1c\xfe\xf1\xd3\xa3\x6f\xde\x7d\xf0\xc6\x9b\x47\x5f\xff\xf6\xf0\x67\x9f\xdc\xc8\x91\x73\xdf\xdf\xee\x7d\xf0\xc9\xd1\x37\x6f\x1d\x7d\xf4\xe6\x71\x4d\xa8\x37\x1a\x6e\x5a\x3b\x8d\x41\x16\x45\xd5\xd6\xf8\xe7\x10\x8a\x73\x04\x16\xaa\x08\x1e\x7e\x9b\xd0\x22\xe7\x6a\x24\xcd\x31\xbd\x3d\x92\xbb\x0b\x05\x7e\x7c\x98\xd6\xe5\xac\x9d\xa9\x27\xf0\xcd\x99\xe9\x63\x53\x6f\x5d\x1b\x2b\x05\xde\x64\x45\xdd\x88\xae\xe9\x2b\x7b\x82\x16\x2c\x3d\x85\x58\xf0\xa3\x2f\xa8\x64\xa4\xe4\x86\x95\x9a\x34\xb3\x70\x18\x44\xf5\xae\x09\x83\x8a\xa6\x86\x4d\xf1\x74\x42\x5d\x1a\x5e\xb6\x8a\x82\xc9\x99\x86\xb1\x54\xdb\xfd\x91\x1a\x9e\x4b\x20\xe8\xa9\xc3\xac\x61\x62\x02\x99\xdf\x06\xaa\x32\xa3\x06\x35\x74\xfa\x6c\x88\xbb\xdb\x60\x28\xe3\x5b\x60\x64\xd9\xef\xb1\x61\xd7\xf2\x9f\x5f\xcb\xcf\x6a\xf5\xa4\x68\x78\xa7\x6c\x0b\x46\x54\xe7\x5b\xa0\x75\xee\xf9\x4f\x28\x8e\x05\x03\x36\x4d\xdc\x19\xc1\x49\x7d\xc5\x42\x1f\xd8\x34\x2a\x03\xcd\xdc\x34\x99\xf5\xce\x95\x51\x52\x2a\x56\x50\xb5\x57\xf7\xb6\xd3\x8c\x38\xba\x17\xa7\x4c\xa5\x1c\xbf\xcd\x18\x99\x99\x60\xeb\x7d\xed\xb4\x58\xc5\x75\x1b\x87\xba\xa7\xb5\xf5\xd3\x4b\x04\x9d\xce\x10\x5e\xed\x9b\x7e\x4f\xd0\xa9\x45\xd4\x0e\x42\x07\xbc\xfc\x8c\x83\xd3\x57\x45\xa6\xe3\x78\xd8\xc8\xf4\xf4\x6e\x3d\xcb\x20\xf4\x2c\x70\xf3\xa7\x91\x56\xe3\x4b\x39\x45\xc5\xe9\xde\xb3\x34\xbd\x6d\x67\xcf\x9c\x5f\xc3\x4a\x3c\xa2\xe9\x6d\xeb\x8c\xc6\x96\x65\xde\x17\x29\x13\x2b\x5c\x19\x9b\xc7\x9a\x73\xc8\x71\xe8\xe3\x22\x45\xca\x59\x7a\x7b\x40\x9e\xec\x44\x67\xe6\x04\x6d\xc1\x99\x15\x95\xa2\x6e\x32\xa6\x19\xbe\x54\x99\x4e\x97\x80\x3b\x5f\xd8\x26\x2b\x4c\x6c\x5b\xef\x36\x9c\x4b\x2e\x60\x71\x71\xd6\x7e\x29\x8c\x69\x9c\x72\xa9\x11\xca\x8a\xf3\x7a\x9e\xaf\x83\x89\xf3\x03\xdd\x9d\x44\xc0\xfd\x8c\xc3\x54\x5a\x86\xd5\xcb\xd4\xee\x1c\xc1\xc4\xa4\xd1\xca\x4e\x84\x98\x72\x36\x11\xdb\x90\xa2\x2d\xb8\x93\xce\x18\x5e\x4e\x38\x56\xf4\xb5\x51\x52\x4c\x86\x47\x9f\x7f\xe1\xa7\xc3\xd1\x9f\x7e\xe2\x11\xdb\xfd\xf7\x7e\xea\x87\x44\xbf\x17\x68\x36\x9f\x24\xa0\xe5\x82\x7f\x55\x64\x20\xc7\xde\x20\x08\x8a\xae\x94\xda\x0c\x96\xcc\x80\xa4\x87\x25\xc1\xa2\x92\x66\x96\x71\x1b\x2e\x94\xbb\xeb\x6c\xa9\x93\xc1\xf5\x5e\x07\x5f\xce\x35\x91\xf0\x83\xff\x38\x4c\xb3\xe0\x8a\x39\xf2\x98\x66\x99\x14\x75\xb2\x1c\x53\xc4\xa9\x14\x5a\x9e\x54\xc0\x9b\x3b\xda\x43\x8e\xfa\x82\xee\x72\x14\x13\x93\x0f\xc8\xf9\x0b\x17\x4e\x35\xf0\xe7\x46\xbd\x9e\x8d\x7a\x02\xb4\x32\x32\x95\x45\x69\xd1\xf1\x80\xc8\xf1\xd8\xbf\x1a\xcb\xb4\xd2\xeb\x8e\x07\x6b\x5a\xc9\x9c\xf7\x83\xb6\xcf\x21\x66\xae\x5e\x9b\x69\x65\xf3\xd1\x27\x22\x8c\xeb\xc5\xe1\x26\x69\x23\x75\xaa\x00\x9f\x7f\x5c\x01\xf6\x95\x6b\xe8\x44\x3f\x82\x78\xba\xc9\x53\x47\x33\x7c\xd9\x10\xcb\xa7\x9f\x3a\x11\xa6\xdd\xbd\xf3\xe3\xbb\x77\xfe\x72\xef\xc3\x37\xee\x7f\xf6\xf5\xda\xe0\xad\x4b\x85\x87\x8f\xa3\xd3\xf3\x71\x45\xf1\x61\x7a\x14\x6c\xc6\x53\x2e\x19\x1a\xfc\x14\x1c\xcc\x4e\x00\x54\x8f\x0c\x40\x7d\xef\x40\xd3\xe6\x6b\x89\xa6\xb2\x6a\xdf\x7d\xc7\xc0\x3f\x6c\x3e\xac\x6e\x42\x86\xf3\x60\x4b\x57\xa3\x82\x99\xba\x6a\xea\xcb\x9b\xe5\x4b\x86\x62\x11\x7d\xdd\xfd\xe6\x83\xc3\xcf\xfe\x70\x32\xfa\xd2\x74\x7a\x3a\xd8\xb5\xee\x76\x6c\x09\x72\x85\xb1\xb7\x3a\xf5\x66\xe0\x69\x85\x20\xa0\x8c\x86\x64\x11\xda\x18\x54\x05\x13\x94\x37\xe6\x16\x94\x89\x25\x4c\x33\xe7\x42\x56\x4c\x5c\xd1\x53\x26\x56\xaa\xa9\xcf\x8a\x09\x68\x95\x3a\xaa\x5e\x2d\x38\x29\xc5\x84\x2c\x5b\x30\xa7\x6b\x3b\x00\x3c\xce\xe1\x16\x9d\x52\x9d\x2a\x56\x1a\xf0\x1f\xda\xdf\x8c\xd6\xef\xac\xe8\x4d\x37\xc4\xb7\x5e\xad\x50\xed\xf5\xce\x27\xe7\x92\xff\x0c\x5f\xdc\x95\xee\x2d\xed\x1c\xed\x24\x9c\x52\xd4\xf2\x65\xf3\xad\xe5\x8b\xec\xb5\x32\x87\xed\x27\x3b\x99\x4c\xab\x02\x85\xe9\x26\x0a\x69\xb6\xd7\x19\x57\xc2\x15\x54\xa7\xbb\xdf\x6e\xb7\x7a\x3d\xb8\xe6\xaf\xe6\xf9\x1e\x64\x4c\xd3\x11\x47\x30\x39\x82\xbf\x39\x02\x9f\x06\xed\x96\x05\x8a\x0b\x97\x49\x51\x37\x29\x95\x2c\x3b\x51\x60\xca\xa2\x2d\xb0\x29\xd4\xbd\xd8\x6e\x59\xb1\xf1\x77\xfc\xe7\x54\xb3\x08\x3a\xec\x07\x16\x17\x81\x2b\x0a\xad\x6d\x3f\x98\x52\xce\x32\x6a\x2d\xd9\x82\x12\x95\xcd\x49\x0d\x5a\x16\x08\xae\x59\x6a\x90\xc2\x19\x52\x69\x54\xfe\x12\xc4\x5a\x41\xce\x84\xba\xea\x26\x0e\x02\xcf\xdc\x81\x5d\xd8\x6f\xb7\xec\xae\xd7\x15\x4e\x51\x18\x08\x30\xd4\x63\xf7\x11\xe6\x74\xca\x64\xa5\xda\xad\x16\x26\xa5\x27\xb9\xe2\x29\x3a\xd6\xe8\x56\xbb\x05\x00\x96\xff\x79\x0c\x3c\x25\x55\xb4\x40\x83\x4a\x03\x35\x46\xb1\x51\x65\x9b\xa0\x35\x26\x28\x6c\x1b\x19\x4b\x83\xc2\x5b\x60\x65\x02\x1b\x03\xe5\xdc\xaa\xae\x11\x76\x18\xe7\x30\x0a\x26\x61\x06\x1a\xd5\x14\x15\xb8\x83\x07\xd5\xb0\x83\x9c\xb7\x5b\xad\x29\x55\xcd\x41\x63\x00\xd6\xc8\x1a\x3f\x75\x93\x29\xe5\x5e\x3d\x4b\xe4\x8f\xf7\x9e\xc4\x0f\xe5\x25\x02\x54\x4a\x2a\x18\x80\xbb\xff\xbd\xd8\x6e\x2a\x84\x8d\xa1\xd3\xec\x30\x18\x40\x14\x79\x6f\xb5\x6a\x06\x1b\xfa\x8b\x2d\xfb\xc6\xca\x9e\x87\xa3\xdd\xc4\x62\x5b\x5b\xa9\x1d\x92\x53\x1d\x3b\x0e\xe2\x76\x6c\xcd\xa9\xda\x74\xdf\x6e\xa2\x73\xb9\xd3\x39\x8e\x20\x37\x05\xef\x90\x3a\x31\x98\x06\x2c\x4a\xb3\xe7\x65\x1e\xb8\x48\xb4\xac\xc2\xc1\xda\x8d\xea\xae\x6a\x7b\xfe\x44\x6d\x17\x21\xc2\x8a\xae\xcb\xcb\x5e\xd3\x17\x9c\x22\x1b\xf5\x7c\xc2\x6d\x12\x34\x7c\x32\xa1\xb7\xe8\x6e\xc7\x3d\xb7\x2a\xc5\xb7\x61\xee\x6c\x90\x94\x79\x49\xb6\xdc\x92\x1d\x0b\xdb\x40\xae\xbf\x74\xe3\x66\x78\x93\x51\x43\xb7\x5d\x68\x97\x0e\x13\xdd\x44\xa3\x62\x94\xb3\xd7\xb0\xd3\xf5\xb4\xe1\x72\x7a\x1b\xea\xf4\x87\x8e\x65\x0f\x3a\x78\xb5\xec\x0b\xef\xbd\x40\x1d\x35\xcb\xae\x6d\x8c\x5d\x79\xa5\xb3\x28\x04\xb2\x71\xc5\xb7\x40\xe1\x58\xa1\xce\x17\x48\x34\x1a\xa8\xaf\xfb\x81\x33\x6d\x82\x30\xdb\x5b\x16\xaf\xf1\xa3\x6e\xc2\x25\xcd\x3a\x64\xf5\x76\x9f\x74\x7d\x9a\x79\x0f\xb6\x5a\x07\x33\xe3\x6f\x3a\x97\x44\x76\xa2\x46\xf6\xe5\x81\x8f\x4b\x3b\x6c\xf1\x10\xe7\xdc\x10\xa0\x83\x47\xda\xcc\x9e\xab\x5d\x6d\x24\xd8\xb4\x71\xbe\x21\x73\x97\x04\xc4\x77\x8d\x50\xd7\xf6\xd3\x2a\x04\xd2\xa2\xc0\x1c\x61\xd4\xa8\xea\xdb\xf1\x2c\xca\xd1\x72\x33\x83\x8e\x0f\xd5\xe9\xcd\xbe\x26\x9c\xd5\x8f\xcf\xe2\x34\x34\x35\x50\x95\x00\x0a\x44\x0a\x04\xc3\x0a\x24\xb5\xf5\xde\xa8\xd9\x15\xd3\x8a\x51\x8f\xa2\x43\x5b\xe6\x1b\xd6\xf7\x14\x76\x28\x33\x16\x63\x16\xa8\x35\x9d\x60\xf0\x56\x8d\x10\xa2\x50\xbb\xd1\x75\x25\x53\x44\x77\x7a\xdf\x61\x26\x87\x3d\x59\x39\x80\x8a\xda\x24\x49\x12\x75\x2f\xb6\xbd\xd4\x7f\xc5\xa6\x7f\x7c\xf7\xae\x57\x5b\x94\xa3\x32\xd0\x21\xcd\xbd\x87\x3f\x25\x1f\xbe\xf5\x9b\xc3\xd7\x7f\xed\xef\xf3\x92\x24\x09\x4d\x10\x77\xd9\xac\x40\xda\x8b\xfd\xca\xb7\xab\x5a\x0d\x57\x98\x2b\x6d\x6a\xd6\xa5\x96\x7e\x13\xb3\xda\xa5\x4e\x68\x52\x27\xf6\x20\x7f\xea\x70\x14\x75\x58\x21\x63\xd3\x76\xdd\x73\x96\x63\xed\x84\xfb\xee\x72\xd0\xe8\x1a\x9a\x8a\x25\xb0\x4d\xe5\xe0\xd1\x57\xc9\xcb\xda\xeb\xf8\x3f\xff\x6b\x01\x22\x44\x16\xe6\x17\x68\x72\xe9\x6e\x0d\xeb\x33\x94\x03\x68\x13\x14\xa8\xa8\xc1\x0c\xfe\xfb\xe6\x8b\x2f\x00\x72\xb4\xc8\x4e\xb7\xd7\xb7\x50\x29\x3a\x91\x2b\xa1\x68\x0b\x22\xfa\x03\xf7\xcb\xe1\xe0\xaa\x98\x65\xaf\x44\x5b\xb0\xdc\x2f\x1e\x43\x75\x2c\x24\xea\xb5\x2b\x2e\x55\xed\xc9\xb1\x9b\xd8\xea\xe8\x90\x25\xad\x48\x5d\xa8\xeb\x00\xa7\xe3\x88\x1c\x87\x5f\x8a\x59\x16\x6d\x35\xb2\x1d\xeb\xa9\x80\xaa\x83\x37\x4d\xe9\x5e\xce\xa9\x98\xd8\xb2\x13\x99\xed\xca\xcc\x58\x08\x2c\x17\x32\xcb\x48\xdb\xb7\xda\xad\x96\x27\x4a\x6a\x50\x9d\x78\xea\x99\x51\x76\xf8\x34\xcd\x66\xb5\x36\x66\x39\x6f\x67\xd9\xa5\x46\xf5\x01\x39\xdb\x3c\xcf\xd7\xcd\xf3\x57\x43\xd9\xfc\x9b\xd4\xc2\x15\x7f\xea\xa0\xb3\x7b\x73\x25\x0b\xa7\xb5\x46\xb3\xfe\x14\xb2\x7e\xf2\x9d\x22\xe9\x9a\x14\x22\x6b\xf0\xf1\x6a\xbd\x0c\xa2\x59\x88\xce\x46\xaf\x44\x4b\xb1\x66\xe3\x4e\x2a\xc5\x98\xa9\xa2\x43\x82\x15\xb5\x0d\xe4\xac\x93\x7b\x96\xfc\x50\x3c\xa3\xd0\xd5\xc8\x8d\x97\xff\xef\x2a\x5c\x22\xdd\xcd\xa0\x6f\xc1\xcc\x13\x92\x65\x25\x5b\xbe\xdf\xf8\x2e\xb0\xcd\x54\xb9\xb2\xf9\x5c\xda\x6c\x70\xba\x5e\x11\x09\x29\x30\x6a\xb6\x78\xa8\x53\xed\x9c\x52\xa7\x84\x9e\x01\x42\xda\xff\x73\x47\xf3\x9e\xff\x73\xac\x7e\xcf\xfd\x4d\xdd\x3f\x03\x00\x00\xff\xff\xd8\x58\xab\x8a\x6a\x27\x00\x00")

func templatesCommandHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandHtml,
		"templates/command.html",
	)
}

func templatesCommandHtml() (*asset, error) {
	bytes, err := templatesCommandHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/command.html", size: 10090, mode: os.FileMode(436), modTime: time.Unix(1509288159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/command.html": templatesCommandHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"command.html": &bintree{templatesCommandHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

