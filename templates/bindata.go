// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/dash.html
// templates/command.html
// templates/upload.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x8b\xd4\x30\x14\xc7\xef\xf3\x29\x9e\xf1\xdc\x0d\x7b\x10\x86\x6e\x36\x20\xea\x59\x0f\x5e\x3c\x66\xda\xd7\x49\x30\x93\x94\x26\x83\x0e\xe2\x41\x04\x15\x05\x61\x2f\x0a\xca\x8a\x82\xb0\x82\xe0\x9c\x5c\x84\xb5\x5f\x66\x99\x9d\x8e\xdf\x42\xd2\xc6\xaa\x85\xa5\x39\x34\xff\xf2\x5e\x7f\x7f\xde\xff\x51\x76\xe5\xe6\xed\x1b\x77\xef\xdd\xb9\x05\xd2\x2f\x34\x9f\xb0\xee\x9a\x30\x89\x22\xe7\x13\x00\x00\xa6\x95\xb9\x0f\xb2\xc2\xe2\x90\x38\x2f\xbc\xca\x68\xe6\x1c\x2d\xac\xf1\x89\x78\x80\xce\x2e\x70\x6f\xa1\xcc\x5e\xe6\x1c\x81\x0a\x75\xe8\x5a\x69\x74\x12\xd1\x93\x88\xf0\xca\x6b\xe4\xe7\xc7\x6b\x68\x9e\xd6\xbb\x93\x67\x17\x5f\x9e\x5c\x9f\xa3\xf1\x8c\x76\x95\xae\xab\xfd\xae\xd3\xe1\xcc\x6c\xbe\x82\x47\xfd\x6b\x38\xad\x69\x21\x16\x4a\xaf\x52\x70\xc2\xb8\xc4\x61\xa5\x8a\x83\xbe\xe9\x71\xaf\x7a\xa1\xd5\x00\xa2\x95\xf3\x49\xeb\x95\xf8\x55\x89\x29\x18\x6b\x70\x04\x91\xce\xb0\xb0\x15\x0e\x48\x99\x35\x1e\x8d\x4f\x81\x9c\x1f\xaf\xc9\xc1\x7f\xb5\x52\xe4\xb9\x32\xf3\xa4\x52\x73\xe9\x53\xb8\x56\x3e\x1c\x5a\x30\x1a\x07\x66\xb4\x4b\x7b\xc2\xc2\xc8\x31\x0c\xb9\xcf\x87\x59\xc9\xfd\x58\x5b\xea\xbf\x29\x31\xad\x38\x13\x71\x3f\x34\x17\x4e\x12\xde\x5e\x8c\x0a\x0e\xcc\x95\xc2\x40\xeb\x73\x48\x32\xab\x6d\x95\xc2\xd5\xe9\x74\x4a\x78\x02\x17\xdf\x3e\x6c\xdf\x9e\x36\xef\x8f\xb6\xaf\x4f\xda\x3e\xce\xa8\x56\x97\x91\x97\xa5\xb6\x22\x27\x3c\x8a\x71\xfa\xe7\x77\xdb\x37\xcf\x37\x67\xa7\x9b\x1f\x2f\x37\x3f\x3f\x8e\x1b\x94\xcb\x99\x56\x19\xe1\x51\x8c\x1a\xfc\xa1\xbf\xda\xd5\xf5\x38\x3d\xd3\x8a\xf0\xf0\x1c\xe5\x36\xf5\xd1\xaf\x4f\xdf\x9b\xb3\x17\xcd\xd7\xf5\x3f\x5c\x88\x3b\x0b\xd9\x33\xda\x2d\x2a\x6c\x2e\xfc\x2f\xbf\x03\x00\x00\xff\xff\xd3\x21\x02\x97\x46\x03\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 838, mode: os.FileMode(420), modTime: time.Unix(1509439429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDashHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdd\x6a\x24\x45\x14\xbe\xcf\x53\x9c\xf4\xcd\x5c\x98\x9a\x1e\xd9\x1f\xd6\xd8\x3d\x22\x9b\xe8\x46\x12\x76\xd1\xf1\x42\x96\xbd\xa8\xa9\x3a\x33\x55\xd9\xea\xaa\xb6\xce\xe9\x99\x0c\xf8\x04\x8a\xa2\x17\x22\xe2\x22\x08\x82\x5e\x09\x82\x08\xfe\x80\x2f\x63\x12\x1f\x43\xaa\x7b\x26\xdb\x9b\x28\xee\x12\xe7\x66\xaa\xaa\xbf\xf3\x9d\xaf\xcf\xf9\xea\x74\xb1\xbd\x77\xff\xee\xe4\xbd\x07\xfb\x60\xb8\x72\xe3\xad\x22\xfd\x81\x93\x7e\x5e\x66\xca\x67\xe0\xe7\x42\xd6\x75\x99\x39\xeb\x9b\x93\x3d\x49\x26\x1b\x6f\x6d\x15\x06\xa5\x1e\x6f\x01\x00\x14\x15\xb2\x04\xc3\x5c\x0b\x7c\xbf\xb1\x8b\x32\xbb\x1b\x3c\xa3\x67\x31\x59\xd5\x98\x81\xea\x76\x65\xc6\x78\xc2\x79\x22\x7f\x15\x94\x91\x91\x90\xcb\x77\x27\x6f\x88\x3b\xd9\x9a\x87\x2d\x3b\x1c\x9f\x3d\xf9\xf8\xf4\xc3\x6f\x4e\xbf\xfc\xfe\xfc\xab\xcf\xce\x3e\xf9\xee\xf4\x87\xaf\xcf\xbe\xf8\xf9\xf4\xc7\xcf\xcf\xbf\xfd\xb5\xc8\x3b\x48\x2f\xad\x97\x15\x96\xd9\xc2\xe2\xb2\x0e\x91\x7b\xc9\x96\x56\xb3\x29\x35\x2e\xac\x42\xd1\x6e\x76\xc0\x7a\xcb\x56\x3a\x41\x4a\x3a\x2c\x5f\x1e\x8e\xb2\xab\x54\x1a\x49\x45\x5b\xb3\x0d\xbe\xc7\x76\x14\xbc\xe5\x10\x61\x15\x9a\x08\x87\xa9\x10\x40\x18\x17\x18\x81\x4d\x0c\xcd\xdc\x80\x04\xb2\x55\xed\x10\x96\x38\x05\x2d\xc9\x4c\x83\x8c\x7a\x08\xf7\x6b\xf4\x40\xa1\x89\x0a\x41\x7a\x0d\xb3\x88\xb8\xfd\x0f\x79\x65\x5d\x3b\x14\x55\x98\x5a\x87\x62\x89\xd3\x54\x73\xa1\x64\x2d\xa7\xae\x5f\xc3\x15\xd2\x26\xd8\x59\xff\x18\x22\xba\x32\x23\x13\x22\xab\x86\xc1\xaa\xa4\xda\x44\x9c\x95\x19\xb1\x64\xab\xf2\x99\x5c\xa4\xd3\xa1\x55\x21\x03\x5e\xd5\x58\x66\xb6\x92\x73\xcc\x4f\x44\x8b\xbe\x42\xd6\xe7\x78\x91\xe0\x36\x62\x90\xe7\xb3\xe0\x99\x86\xf3\x10\xe6\x0e\x65\x6d\x69\xa8\x42\x95\x2b\xa2\xd7\x66\xb2\xb2\x6e\x55\x1e\x61\x8c\x76\x89\x92\x0d\xc6\xdd\x1b\xa3\x91\x65\xe9\xac\xda\xb9\x31\x1a\x7d\x90\x6a\xf5\xd2\x3b\xd2\xd3\xee\xcd\xd1\x68\xe7\xf6\x68\x34\x68\x25\x0d\x88\x57\x0e\xc9\x20\xf2\xa0\x53\x31\x68\xad\xa4\x88\x06\x57\x6b\x71\x81\xdd\x28\xde\x60\x2f\x15\x46\x11\xe5\x95\xb4\x7e\x98\x1e\x5d\x8f\x86\x0d\x56\x48\xff\x03\x91\xf4\xb6\x92\x8c\x6b\xa6\x8e\x6a\x5b\x08\x78\xdd\xcf\x1b\x27\x93\xf3\xa6\x04\x42\xac\x93\x74\x46\x05\x8a\xea\x82\xe4\x38\x71\xb4\xd8\x61\x65\xfd\xf0\x98\x9e\x49\x7a\x2c\x17\xb2\x0b\xca\xc6\x45\xde\xad\x9e\x87\x4b\xc4\xd0\x30\xbe\x00\x5b\xd2\x7c\x88\x70\x6f\x72\x74\x78\x0b\xc8\xd8\x6a\x07\x66\x21\xc2\xc1\xfe\x6d\x71\x07\xa8\xa9\xd3\x5d\x85\x30\x5b\x03\xd0\x61\x85\x9e\x7b\x6f\xb6\x2d\xc4\x43\x3b\x03\xc7\x70\xb0\x0f\xaf\x3c\xea\x4e\xbb\xdf\x33\x4a\xd3\xd0\xa1\xdd\xbc\x1d\x2a\xb7\x52\x9e\xb5\xef\x54\xd0\xd8\xfa\x8e\x16\x3e\xe7\xd8\xf8\xc7\x1d\x24\xbd\xc2\x25\xad\x5d\xbe\x87\xe8\xb5\x9d\x3d\x4a\x02\x8a\xbc\x1b\x6d\x5b\xc5\x34\xe8\xd5\xa6\x0b\xda\x2e\x40\x39\x49\x54\x66\x06\x63\xc8\x7a\xc1\xe6\xe6\xe6\x49\x3b\x9d\xb2\xf1\x5f\x7f\x7c\x7a\xfe\xdb\x4f\x7f\xfe\xf2\xd1\xf9\x93\xdf\x8b\xdc\xdc\xec\x61\x5b\xa7\x08\x5a\x5a\x56\x06\xe3\xb8\xc8\x2f\x1d\x3c\x45\x7a\xb9\x10\x53\x99\x20\x9b\x55\x27\x24\xd7\x76\xd1\xb7\xc6\x04\xab\xda\x49\x46\x82\x37\x91\xe1\x6d\xf4\x1a\x23\x6a\xb8\x87\x11\x9f\xd6\x33\xa9\xb7\xba\xcc\x6a\xd7\xcc\xad\xa7\x6c\x23\x78\xed\x37\x0d\x33\xa9\xf1\xc0\xef\x85\x65\x37\xef\xd3\x3c\xfd\x97\x7c\x6f\x5d\x74\xbd\xdf\x2d\x78\xe0\xa4\x42\x0d\x92\x81\x0d\x02\x7a\x9d\xda\x9b\x96\x3a\xa8\x26\x75\x17\x28\xb4\xfb\x5a\xce\x91\xc0\x05\x99\x92\x12\x63\xfc\x2f\x3f\x5f\x7c\x76\xae\xed\xe6\x2a\xe8\xc6\x21\x5d\x9b\x87\xaa\x10\xd8\x58\x7c\xfe\x2b\x56\xe4\x6b\x2f\x15\xad\x0f\xc7\x7f\x07\x00\x00\xff\xff\x6a\x93\xac\xef\x73\x07\x00\x00")

func templatesDashHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDashHtml,
		"templates/dash.html",
	)
}

func templatesDashHtml() (*asset, error) {
	bytes, err := templatesDashHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dash.html", size: 1907, mode: os.FileMode(436), modTime: time.Unix(1509421239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCommandHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\x1c\xc5\xf5\x7f\xf7\xa7\x38\x2e\x23\x66\x46\x6c\x77\xe3\x05\xff\x1f\xd6\x33\x63\x81\x6d\xf8\x3b\x02\xe1\xc4\xe6\x21\x4a\x50\x54\xd3\x5d\x33\x5d\x76\x75\x55\x53\x55\x3d\xbb\xcb\xca\x52\x22\x25\x40\x12\x12\x81\x48\xc4\x2d\x48\x20\x41\x82\x22\x11\x1e\x71\xc2\xed\xcb\x78\xed\xf5\x53\xbe\x42\x54\x55\xdd\x3d\x3d\x7d\x99\x99\xf5\x05\x29\x11\xf3\xb0\xd3\xd3\x5d\xe7\xd4\xb9\x9f\xdf\xa9\xde\xe1\xc9\x0b\x2f\x9c\xbf\xfa\xd3\xcb\x17\x21\xd6\x09\x1b\x9f\x18\xba\xaf\x13\xc3\x98\xe0\x68\x7c\x02\x00\x60\x98\x10\x8d\x81\xe3\x84\x8c\xd0\x9c\x92\xdd\x54\x48\x8d\x20\x14\x5c\x13\xae\x47\x68\x97\x46\x3a\x1e\x45\x64\x4e\x43\xe2\xd9\x1f\x5b\x40\x39\xd5\x14\x33\x4f\x85\x98\x91\xd1\x69\x94\x33\xd2\x54\x33\x32\xbe\xfb\xd5\x5b\xb7\xdf\x7f\xe7\xd6\x3f\x7f\x7f\xf7\x9d\xcf\x86\x81\xbb\xe7\x9e\x9f\xf4\x3c\x78\x5a\x08\xad\xb4\xc4\x29\x78\x5e\x7e\x9b\x51\x7e\x1d\x24\x61\x23\xa4\xf4\x3e\x23\x2a\x26\x44\x23\x88\x25\x99\x9a\x3b\x58\xd3\x30\x08\x45\x92\x60\x1e\x05\x93\x82\xda\x4f\x28\xf7\x43\xa5\xd0\x7d\xf0\xf0\x74\x4c\x12\x72\x2f\x9c\x94\x0a\xa6\x82\x6b\x0f\xef\x12\x25\xee\x99\x85\x7d\xd8\x41\x17\x0b\xa9\xc3\x4c\x03\x0d\x05\xaf\x91\x4e\xf1\xdc\xdc\xf5\x69\x28\x10\xe8\xfd\x94\x8c\x10\x4d\xf0\x8c\x04\x7b\x9e\x5d\x3d\x3e\x31\x0c\x9c\x77\x4f\x0c\x27\x22\xda\x1f\x9f\x70\xdc\xb1\xa2\x11\x81\x90\x61\xa5\x46\x88\x91\xa9\xf6\x52\xcc\x09\xcb\x37\x2f\x1d\x74\xc5\xee\x02\x1c\xcf\x27\x58\x96\x4e\xb2\x8f\x39\x9e\x17\xf4\xf9\x63\xf7\xe5\x39\xc9\x3c\x2d\xd2\xe2\x0e\xe5\x73\x22\x15\xa9\x30\xb7\x1c\x22\x5a\xe3\xe0\x19\x49\x89\xac\xad\xb3\x6b\x55\x8a\x79\x6d\xf1\x44\x62\x1e\x81\xfd\xeb\xd9\xc0\x42\xcb\xd1\x56\x25\x99\x18\x6b\x52\x3e\xf3\xc2\x4c\x2a\x21\xd1\xf8\xd1\x53\x7b\xdb\x67\x30\x39\x3b\x0c\xcc\xb2\x71\xfe\xb5\x2c\x5f\x10\xd1\x79\x8b\xc8\x34\x2a\x44\x40\x35\x89\x42\xc1\x18\x4e\x15\x81\xe2\xa2\x4d\x93\x8c\x55\xa8\x0a\x0b\x71\x3c\x6f\x59\x9b\xc7\x41\xb1\x3e\x92\x22\x8d\xc4\x2e\xef\x58\xe9\xfc\x9a\x87\xc7\x29\x54\xa7\xf2\xb4\x98\xcd\x18\x41\x10\x61\x8d\xf3\x1f\x15\x9e\x20\x85\xf9\x3d\xc9\xb4\x36\x41\x86\x25\xc5\x5e\x8c\x55\x2a\xd2\x2c\x1d\x21\x2d\x33\x92\xdf\x24\x7b\x29\xe6\x11\x89\x46\x68\x8a\x99\x51\xf1\xf0\xe6\xcd\x3b\x7f\xfa\xec\xf0\xad\x6f\x6e\x7d\xf5\xc9\xdd\x0f\x5e\x5d\xf6\x55\x88\x25\xd1\x68\x5c\x9a\x19\xaf\x90\x3d\x63\xd6\xb6\x8c\x2a\x7d\xde\xa5\xe7\x15\x93\x2a\x75\x3d\x12\xc2\xb3\x15\x26\x80\x22\x76\xcf\xa5\x71\x0a\x92\xbc\x9c\x51\x49\x7e\x21\x78\x48\xfa\xbd\x65\xd6\x7e\x1a\xa7\xbd\xc1\x59\x38\x57\x8d\xeb\x0e\x1f\xac\x5e\x90\x9b\xde\x5a\x36\xaf\x2c\x9e\x51\xe5\x49\x34\x3e\x7c\xfd\x9d\xc3\xd7\xfe\x75\xe7\xeb\xb7\x0f\x3f\x7f\x77\xa5\xfa\x96\x47\xb0\x6a\xa7\x61\x90\xb1\x8e\x20\x69\xa5\x73\xeb\x9b\xb7\x9d\x8f\xad\xad\x71\x14\xe5\xf6\x28\xed\x3c\xd1\x1c\x26\x9a\x7b\x2a\x0b\x43\xa2\x54\x11\xa1\x13\xcd\xd1\xf8\xf6\x97\x5f\x1d\xfe\xee\xa3\x65\x0f\xcf\xd8\x7e\x1a\x9b\x5a\x03\xe5\x95\x97\xb2\x4c\x79\x8a\xce\xca\x40\xa2\x51\x44\x78\x1e\x46\x8b\x60\x70\x82\xb4\x08\x5e\x91\x30\x22\x8c\x68\xd2\x25\x64\x84\xf9\x8c\xc8\x25\x19\x0f\x5f\xff\xe8\xee\x7b\x9f\xac\x97\x51\x4b\xac\xe2\x7b\x94\xaf\x2b\x87\x8b\x4b\x49\x67\xb1\xee\x4a\xe8\x66\xd9\x9b\x0a\x99\x14\xa4\xa6\x16\xaf\x4a\x70\xbb\xd6\x18\x46\x66\x3c\xb7\xca\x33\x42\x26\xa5\x65\xcc\x73\x6f\x26\x45\x96\xae\xc9\x91\x83\x03\x3a\x05\x3f\x22\x53\x9c\x31\x7d\x19\xeb\xf8\xc6\x8d\x35\x49\x80\x27\x84\xd5\x24\xd7\x64\x4f\xa3\xf1\xed\xdf\xfe\xed\xe8\xe3\x37\xee\x7c\xf0\x8f\xc3\x6f\xfe\xfc\xef\xaf\xdf\x1f\x06\x76\xe9\x9a\x50\xa7\x3c\x35\x2d\x2d\x1a\xa1\x14\xeb\x18\xe5\x98\xc3\x5d\xbb\x46\x66\x99\x2f\xe9\x65\x70\x88\x14\x0c\x2c\xad\xa7\x12\x04\x8a\xbe\x42\x46\x68\xfb\x71\x04\x73\xcc\x32\x32\x42\x07\x07\xcb\x3a\xa1\x31\x1c\x1c\x10\x1e\xad\xd3\xce\xba\xdc\x07\xf0\xdb\x5a\x41\x63\xf5\x64\x63\xe5\xc2\x22\x72\x9d\x7e\xe5\xcf\xaa\x8a\x4e\x89\xff\x7b\xbc\x55\x59\x04\x29\xc3\x21\x89\x05\x8b\x88\x1c\xa1\xa3\x2f\xbe\x3c\xfc\xcb\x67\x47\xdf\xbd\x77\xf7\xb5\x37\x8e\xbe\x7d\xfb\xf0\x37\x9f\x5e\x89\x09\x63\xae\xfc\xde\xfe\xf0\xd3\xa3\xef\xde\x3c\xfa\xf8\x8d\x55\x11\x14\x6c\x2e\xbc\xc1\x87\x85\xe4\xee\x3a\xb7\xf2\x69\x04\xcb\x39\xb3\xbe\x1c\x57\xc2\x3e\x8c\x49\x78\x7d\x22\xf6\x96\xf2\xf6\xf8\xc1\x67\x7a\xfa\x1a\xba\x8a\x3e\xce\xe0\xc5\xd6\x85\x56\x82\x93\xab\x34\x29\xea\xcb\x25\x75\x61\x9f\xe3\x84\x86\x1b\xb0\x05\x57\xf3\x73\x91\xb4\x10\x4c\xd3\x54\xa1\xb2\xff\x8e\x73\x56\xc1\x25\xae\x89\xc4\xa1\xa6\x73\xb2\x19\x53\x1b\x7f\xe7\x8d\xa0\xa0\x63\xaa\x60\x2a\xe4\xce\x70\x22\xc7\xa7\x7d\xc8\xe5\x54\x79\x5f\xa3\x7c\x06\x91\xdb\x06\xb2\x34\xc2\x9a\x28\xe8\x0f\xe9\x98\xec\xed\x80\xc6\x94\x6d\x81\x16\xe9\x30\xa0\xe3\x81\xa1\xdf\x6e\xa5\xa7\x85\x78\x82\x97\xb4\x73\xba\x05\x13\xac\xe2\x2d\x50\x2a\x76\xf4\x1b\x64\x45\xa9\xc0\x06\x6d\x6e\x75\x81\xb0\xd0\x0b\xd6\xb6\xe5\x4a\x9b\x58\x54\xc3\x46\x8f\x48\x25\x4d\xb0\xdc\x2f\xca\xd4\x26\xdd\x0b\xef\x7b\x21\x95\x21\x23\xf7\xd6\x1f\x16\x6a\x98\x44\xee\x6a\xd9\x0d\x74\x09\xed\x3d\xbb\x0d\x87\x9e\xf4\xbc\xc0\xe7\x78\xbe\x80\x9c\x4b\xd8\x3c\xe0\x38\xa7\x18\x06\x16\xe9\x57\x66\xae\xa7\x2c\xf2\xbf\xc8\x23\x65\x48\x2a\xf7\xa3\x08\xf2\xea\x04\xb6\xc9\x94\x23\x59\x01\x7a\xc5\x9c\x48\x86\xf7\x9f\xc6\xe1\x75\xd3\x60\x2a\xa6\xce\x9f\x78\x13\x1c\x5e\x37\xf6\x29\x05\xae\xd3\x3e\x8f\x29\x6f\x50\x45\xb4\x0a\x7e\x2b\x10\x76\xec\x5c\x25\x78\xc8\x68\x78\x7d\x84\x1e\xe9\xf7\x4e\x55\x18\x6d\xc1\xa9\x86\x48\xbd\x81\x3f\xc5\x11\x79\x21\xd3\xfd\x01\x02\x3b\x54\x99\x72\xca\xb5\x67\x8a\xec\x0e\x9c\xf6\xcf\x90\xe4\xec\xa2\xd0\x62\x98\x62\x2f\x64\x42\x11\x48\x33\xc6\x8a\xce\xdd\x86\x57\xab\x8d\xdb\x0e\x4b\x60\xff\x7a\x79\xbb\x59\x31\xdd\xb8\x75\x66\xb8\xa1\x7c\x56\x4a\x65\x6a\xbf\x87\x19\x9d\xf1\x1d\x08\x89\xc9\xc2\x75\x83\x8f\xe3\x93\xcf\x3a\x43\xa5\xa5\xe0\xb3\xf1\xd1\x17\x5f\xba\x3e\x70\xf4\xd7\x5f\x39\x7c\x76\xe7\xfd\x5f\xbb\x76\x30\x0c\xf2\x35\x9b\x8e\x37\x26\x0e\x2e\xf2\x08\xc4\xd4\xe9\x06\xb9\xcc\x8d\x54\x5c\xc0\x90\x05\x82\x74\x30\x24\x57\x2e\xc5\x91\x21\xdc\x81\x33\xe9\x5e\x9b\x5a\x45\x5c\xd8\xda\x6c\xe1\xca\xe9\xd2\x29\xae\xbb\xaf\xc2\x30\x4b\x56\xa9\x2c\xf7\x70\x14\x99\xa1\x77\x6d\x8a\x87\x82\x2b\xb1\x2e\xbd\xbb\x2b\xde\x31\xfb\x7b\x82\xf7\x18\xe1\x33\x1d\x8f\xd0\xf6\x99\x33\x1b\x75\xf9\x4a\x7f\x57\x8b\xfe\x8e\x00\x67\x5a\x84\x22\x49\x0d\x28\x1e\x21\x31\x9d\xba\x5b\x53\x11\x66\xaa\xad\x9a\xb4\x17\x99\xc2\xfa\xb9\xb4\xcf\x10\x12\xd9\xd4\x2d\xbb\x99\x09\x4d\x17\x93\x30\x2d\x1e\x8e\xbb\xb8\x4d\xe4\x46\x0e\xde\x7e\x58\x0e\x76\x49\xac\xf1\x4c\x3d\x00\x7f\xda\xce\x54\x78\x33\xff\xd1\xe1\xcb\x27\x1e\x5f\x8b\xcd\x6e\xdd\xfc\xe5\xad\x9b\x7f\xbf\xfd\xd1\x6b\x77\x3e\xff\xb6\xd5\x79\x6d\xa1\x70\x7c\x3f\x5a\x39\x1f\x96\x17\x8f\x53\xae\xa0\x1b\x6f\xd9\x60\x28\xf1\x55\x6e\x60\xba\x06\x70\x3d\x30\x80\xf5\x5f\x07\xaa\x3a\x41\xd4\x22\xb3\x0a\xdb\xdd\xa7\xe3\x8f\x1b\x0f\xcd\x4d\xd0\xb8\x0a\xc5\x54\x36\x49\xa8\x2e\xb2\xa6\x38\x50\xaa\x9f\x2e\x24\xcb\xd8\xec\xd6\x77\x1f\x1e\x7e\xfe\xee\x7a\x6c\xa6\xf0\x7c\x33\x50\xd6\xd6\xde\x6a\x70\xac\xb6\xa4\xd9\xfd\x4a\x04\x54\x01\x34\x95\x45\x39\xf8\x80\x05\x8e\x2a\x5c\xa3\x89\x4c\x28\xc7\xac\x54\x3b\xc1\x94\xd7\x60\x4e\xc5\x94\x34\x99\xd9\xe4\xc7\x94\x37\xb2\x6a\x48\x93\x19\x28\x19\x96\x27\xbe\x34\x99\x05\x05\x7f\x3f\xe5\x33\xd4\xaa\x50\x7e\x59\x81\x77\x8c\xc1\x35\x3c\xc7\x2a\x94\x34\xd5\xe0\xbe\xd4\x42\xc5\xe2\xbe\xd9\x29\xd6\x3a\x55\x3b\x41\x10\x46\xdc\x9f\x08\xa1\x43\xa5\xfc\x50\x24\xc1\xb5\x97\x33\x22\xf7\x83\x6d\xff\xb4\xff\x64\xfe\xc3\x9e\x76\x5f\x53\xd6\xfe\x96\xc3\x31\xd8\x95\x67\xef\xc1\x13\xfe\x13\xfe\x99\xe0\x9a\xaa\x1d\xe9\x77\xf2\x5d\xa8\xfc\x48\x3f\x12\x61\x96\x10\xae\x07\xbe\x24\x38\xda\xef\x4f\x33\x6e\xf3\xae\x3f\x80\x83\x65\x20\x1d\x04\x70\xc9\xbd\xab\x60\xfb\x10\x51\x85\x27\x8c\x80\x8e\x09\xb8\x33\x26\x70\x91\xb3\x44\x62\x10\xe7\xd2\x09\x54\x6f\xe0\xa7\x52\xa4\xfd\x5e\x4e\x1f\xf5\xb6\xc0\x04\xe0\xe0\x6c\x7d\x2f\xef\x3e\x3f\x75\xd1\x0d\x3e\xcf\x85\x00\x03\xb5\xc0\xe6\x99\x52\xa6\xc4\xcc\x31\xa3\x11\x36\x5a\x6f\x41\x4a\xa4\x09\x73\x05\x4a\x24\x04\x6c\xfd\x55\x20\xb8\x55\x34\x53\x44\xba\xc3\x93\x9a\x96\xe8\x54\x9e\xb5\x03\xdf\x62\xed\x85\x15\x89\x31\x63\xbd\x0e\x04\x01\x5c\x96\x64\x4e\xb8\x86\x1c\xfd\xba\x91\x61\x42\x62\x3c\xa7\x22\x93\x0d\x0a\xe2\xa7\x8e\xe0\x82\x5b\xdf\xaf\x1b\x2c\x67\xfb\x2c\xc9\x59\xa5\x58\xe2\x84\x68\x22\x15\x60\xad\x25\x9d\x64\xa6\x0e\x1b\xe5\x73\x05\x4d\x2d\xa5\x61\xae\xe0\x16\x18\xe6\x40\xa7\x80\x19\x33\xaa\x2a\x02\xbb\x94\x31\x98\xe4\x26\x20\x11\x28\x22\xe7\x44\x82\x1d\x7f\xb0\x82\x5d\xc2\x58\x43\x82\x39\x96\xe5\x10\x34\xb2\x76\x29\x00\xdd\xc0\x9f\x63\x66\xa4\x6e\x23\x71\xa7\x13\x8e\xc0\x61\x86\x95\xcb\x89\x94\x42\xc2\x08\xec\x01\x7a\x8b\x1d\xe8\x14\xfa\xa5\x14\xa3\x11\xf4\x7a\x6d\x4e\xb0\x66\xcd\x39\x99\x10\x6c\xee\x55\xf8\xb6\x0a\xb2\x07\xbe\x41\xec\xa6\xee\xf4\x51\x8c\x95\x67\x39\xa0\x16\x41\x0b\xe2\x3a\x46\x1c\xf8\x2a\x16\xbb\x6d\xaa\x75\x53\xc4\x3a\x61\x7d\x54\x44\x2f\x55\x40\x92\x54\xef\xb7\xed\x7a\xa3\xdd\x1a\xb9\x81\x1f\xa8\x2d\xb6\x8f\x6f\x8b\x65\x9c\xb5\xde\x12\xf5\xf5\xce\x0e\xcf\x59\x65\xee\xc1\x0a\x27\xad\x80\x5d\xfa\x3f\xe2\xe3\x6b\x78\xaf\xdf\xfe\xd0\x7c\x32\xc9\x76\xa0\x32\xb0\xf9\x69\x9c\xa2\xad\xce\xe5\xa6\x7f\xef\x00\xba\xfc\xc2\x95\xab\x2b\x56\x45\x58\xe3\x1d\xab\x6c\x6d\x12\x1c\xf8\x8a\x48\x8a\x19\x7d\x85\xf4\x07\xdd\xf4\xf9\x6b\x86\x1d\x28\x2b\x8e\xe1\xd8\xa5\x63\xd5\x1a\x66\x9d\x0b\x89\x9c\x47\x67\x64\x54\x3f\xa6\x09\x4c\x6d\x31\x0c\x17\xe1\x98\x33\x98\x66\x6c\x0b\x24\x99\x4a\xa2\xe2\xa5\x25\x8a\x68\x28\xde\x3f\x01\xa3\x4a\xaf\xdd\xc6\x34\x8e\xe5\xb7\x4d\xbd\x81\xcf\x04\x8e\xfa\xa8\xf9\x12\xaa\x2b\xe4\x8a\x4f\xf7\xd1\xf5\x8d\xd5\x8e\xb9\x6a\x5d\xd8\x33\x50\xad\xd7\xba\xf0\x46\x5b\x19\x2e\xe4\x3f\xc6\x51\x4b\x5b\x08\xaf\xdc\xe7\xc1\xf7\xc7\x67\xf2\xf8\x01\x2d\xc0\xe4\xa5\x75\x20\xaa\x9c\x6a\x21\xd7\x58\xf2\xd2\x6f\xbe\x8d\xf8\x20\xcc\xac\x12\x13\x98\x94\x8a\x35\x10\xc0\x22\xb2\x7b\x8d\xfe\xd8\x16\x73\x9b\x1b\xef\x12\xaf\xdb\xee\x7b\xb6\x54\x98\xf7\x4b\x90\x19\x07\x0c\x48\x70\x02\x9a\x26\x04\x15\x56\x6b\x18\x63\x71\xd2\xda\x34\xc6\xf7\x0c\x16\xae\x18\x37\x63\xd8\xc5\x54\x9b\xa1\x2b\x21\x4a\xe1\x59\x73\x06\x34\x52\x17\x88\xb9\x97\x17\xe1\xde\x65\x29\x42\x42\xec\xe1\xd6\x2e\xd5\x31\xec\x8b\xcc\xce\x6f\x44\x69\xdf\xf7\x7b\xff\x33\xf0\x64\x73\x2c\x81\x19\x91\xba\x8f\xca\xf3\x44\x77\xe4\x74\xf8\xe6\x1f\x0f\x5f\xfd\x83\x3b\x3a\xf7\x7d\xbf\xab\x54\x91\x3d\xda\x51\x06\x9a\xee\x58\xd5\xa7\x5c\x8f\x2a\xb4\x6a\xaf\x6e\xeb\x1b\xd3\xa2\x29\xd5\xde\x92\x6e\xd0\x94\x8e\xdf\x90\xd6\xb6\x14\x77\x8a\x60\x57\x14\x71\x08\x11\x9d\x77\x32\x6c\x0b\x58\x2b\x44\xbb\xed\x3b\x9a\x40\xa5\x01\x18\x0e\xcd\x06\x70\xe3\xfb\x2f\x3d\x2f\x2a\x67\x86\x1f\xfd\xd8\x0c\x8f\xd0\x13\x1c\x41\x42\x74\x2c\xec\x3b\x87\xe2\xd8\xc5\x0e\x68\x33\xc2\x89\xc4\x9a\x44\xf0\xff\x57\x9f\x7f\x0e\x08\x23\x66\xca\x53\x8d\x7a\xd4\xe8\xb2\x82\xf7\x7b\xb6\x2e\xf5\xb6\xa0\x87\x7f\x56\xfb\xa7\x8c\x97\x7a\x5b\xb0\xb2\x78\x3f\xf4\xba\x52\x67\x53\x49\xea\x4b\x17\x6c\x5a\xeb\x98\xaa\x81\x6f\xea\x4a\x1f\xd5\xc4\x47\x6d\x85\xa9\x6d\x4a\xb5\xd4\x3d\x4b\xed\x1e\x79\xd4\xcc\xaa\xe5\x46\x2d\x82\x6c\x34\xec\xda\x99\xa5\xa3\x3a\x9e\x8f\x31\x9f\x99\xca\xc6\x23\xd3\x7f\xa9\x36\xf3\xb5\x58\xca\x0c\x2d\x4c\xa7\x69\x10\x3b\x12\xbf\x98\xe5\x7d\x47\xbb\xb0\x85\x41\x30\xad\x5d\xe0\xbe\x8b\x89\x2b\x15\xa8\xb4\xcb\x08\xc1\x63\x15\x77\x3c\x06\xe8\x51\xe3\xd8\xd1\xe9\x7b\x2e\x46\x3f\x14\x94\x8a\x62\x0f\xba\xa0\x5c\x70\x47\x37\x78\xf1\xea\x52\x8a\xc4\x1a\x46\x91\xfa\x21\x47\x33\xba\x37\xc0\x72\x1b\x64\x67\x99\x5f\x6d\xcd\x71\xf9\x78\xa0\x59\x8f\x46\xbd\x5a\xbc\xf5\x5e\xea\xad\x88\x77\xd7\xce\xf9\x94\xca\xa4\x8f\x72\xe5\x0b\xd5\x4d\xe4\xba\xad\x1e\x03\xf4\x73\xfe\x94\x24\xb6\xfa\x5c\x79\xf1\x27\x17\xe1\x1c\x1a\xdc\xe7\xdc\xb8\x64\x3b\x33\xb5\x9c\xeb\xc8\x99\xb5\x13\xe5\xb3\x17\x57\x0d\x94\x3f\x0c\x84\x6e\x20\xdc\x44\xf0\x0b\x1b\x1d\x62\x76\x89\xb3\x61\xcb\xe8\x71\xc1\x49\x5b\xe3\xda\x84\xe7\x46\x87\xa5\xf5\xcf\xc3\x9d\x77\x57\xef\x56\x5d\x51\x5c\x2f\xce\xa0\x87\x41\xfe\x4f\xd4\xc3\xc0\xfe\xef\xfc\x7f\x02\x00\x00\xff\xff\x49\x15\x02\x8e\x52\x2f\x00\x00")

func templatesCommandHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandHtml,
		"templates/command.html",
	)
}

func templatesCommandHtml() (*asset, error) {
	bytes, err := templatesCommandHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/command.html", size: 12114, mode: os.FileMode(420), modTime: time.Unix(1509435557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUploadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4f\x6f\x1b\x45\x14\xbf\x47\xca\x77\x78\x9d\x56\xb2\xd3\x7a\x77\xe2\x12\x01\x0a\xbb\xbe\x00\x95\x80\xaa\xad\x48\x82\xc4\xf1\x65\xf7\xd9\x3b\xc9\xec\xcc\x30\x33\xbb\x8e\x83\x38\x83\xb8\x70\xe3\xc0\x89\x03\x12\x77\x24\xfe\x48\xf0\x71\xd2\x8a\x8f\x51\xcd\xec\x3a\x71\xec\xa4\xad\xd4\x9e\xbc\x3b\xef\xf7\x7e\xef\xf7\xfe\xcd\x3a\xbb\xf3\xc9\xd3\x8f\x0f\xbf\x7e\xf6\x29\x54\xbe\x96\x93\xed\xad\xec\x4e\x92\x80\x25\x49\xe8\x08\xda\xbd\x74\x2f\x7d\x7f\x04\x85\x36\x0b\x2b\x66\x95\x87\x87\xbb\xe3\x3d\x48\xc2\xcf\x07\xf0\x05\x5a\x2f\x4e\xe1\x2b\xe1\xe6\xe4\xe6\x68\x51\x41\x92\xf4\x14\xae\x31\xc6\x92\x73\xf0\xf9\xc1\x91\xb2\xe4\xb4\x6c\xa9\x7c\x2c\x8e\x2d\xda\xc5\xd1\x97\x8f\x7b\x60\x88\x09\x12\xd5\x2c\x67\x85\x62\x93\xed\xad\x70\x46\x58\x4e\xb6\xb7\x00\x00\xb2\x9a\x3c\x42\x51\xa1\x75\xe4\x73\x76\x74\xf8\x28\xf9\x90\x01\x5f\x5a\xbd\xf0\x92\x26\x2f\x7e\xfe\xfe\xe2\xdf\xbf\x2e\xfe\xf9\xf1\xe2\xbf\x5f\x33\xde\x9d\xf5\x00\x29\xd4\x29\x54\x96\xa6\x39\x73\x1e\xbd\x28\x78\xe1\x1c\x3f\xd6\xda\x3b\x6f\xd1\xa4\xb5\x50\x69\xe1\x1c\x0b\xf9\x06\xc8\x42\x92\xab\x88\x3c\x7b\x35\xc1\x54\x48\x12\xca\x34\xfe\x8a\xa0\xa6\x52\x60\xce\x50\xca\x4d\x32\xf0\x0b\x43\x39\xf3\x74\xe6\x79\x04\xf3\xd7\xd0\x6b\xe5\x13\x9c\x93\xd3\x35\xbd\x5e\xa2\x2b\xac\x30\x1e\x9c\x2d\x2e\x49\x4e\x1c\x3f\xf9\xa6\x21\xbb\x48\xde\x4b\x1f\xa6\xe3\xc8\x71\xe2\xd8\x24\xe3\x1d\xf8\xd5\xae\x46\x36\x33\xa1\x1c\x77\xda\x7a\x3c\x96\xb4\x74\x5f\x4d\xe3\x04\x5b\xec\xbc\xdf\x94\xf5\x7a\xcd\xde\x9a\x4e\xea\x02\x25\x39\x7e\x5e\xbd\x25\x97\xaf\xa8\x26\xc7\xa7\xd8\x3d\xbd\x1b\x75\x46\x1b\x43\xf6\xdd\x70\x35\x46\x6a\x2c\xd7\x86\xf6\xcd\x58\x33\xde\xef\xd2\xf6\x56\x76\xac\xcb\xc5\x32\x50\x29\x5a\x28\x24\x3a\x97\xb3\x42\x2b\x8f\x42\x91\x85\xd3\x36\xa9\x51\xa8\xe5\x5c\xad\x03\x0d\xce\x28\x09\x74\x64\x57\x21\x11\x56\x8d\x27\xcf\x7f\xfb\x65\x75\x0f\x61\xff\x3a\xa4\xcb\xaf\x46\x29\x27\x99\x33\xa8\x96\xac\x53\x84\x29\x26\xa5\x9e\xab\x90\x64\x14\x6f\x50\x4d\x20\xc3\x7e\x2d\x4c\x73\x2c\x45\xc1\x26\x2f\xfe\xfc\xe9\xff\xdf\x7f\x78\xfe\xf7\x1f\x1d\x7f\x17\x2b\xe3\x18\x3c\x22\xed\x9a\x24\x5e\x8d\x63\xde\xd7\x75\xda\x75\xd8\x54\xdb\x1a\x6a\xf2\x95\x2e\xf3\x67\x4f\x0f\x0e\x01\x0b\x2f\xb4\xca\xfb\xaa\x03\xa9\xa2\x2b\x73\xdd\x48\x2f\x0c\x5a\xcf\x83\x4b\x52\xa2\xc7\xf5\x32\xac\x57\x2c\x02\x67\x56\x37\xe6\x26\xe4\x06\x5a\x48\x4a\x42\x4c\xa1\x66\xb7\xe1\xa3\x4f\x5c\x22\x10\x65\xef\x32\x5e\x0e\x42\x78\x63\xd0\xe9\x94\xb4\x4a\xcb\x40\x61\xdd\x23\x1c\x83\xa0\x3d\xd1\x2d\xd9\xb9\x15\x9e\x12\xa1\x84\x17\x28\x43\x2f\xa4\xa3\xde\x5c\x0b\x95\x44\xfa\x42\x37\xca\xe7\x6c\x7c\x6b\x0a\xbc\x14\xed\x4d\x85\xb8\xed\x7c\xb3\x07\xb1\xa2\xd7\x9a\xb5\x74\xce\x78\x3f\xb5\xd9\xb5\x45\xb9\x37\x64\x77\xfb\xdc\x77\xd2\xcb\x7b\x65\xf8\xed\x15\x41\x5c\xe5\x7d\x18\x4c\x71\x30\xba\x3a\x0d\xdf\x99\x06\x67\xc1\x70\x5e\xad\x1a\xba\x66\x1f\x59\xb9\x0f\x83\xbe\xf3\x83\x11\x70\x0e\x0b\xdd\x40\xdd\x38\x0f\x8e\x3c\x20\xb4\x28\x45\x09\xe1\xeb\x55\x91\x25\x20\xe9\x28\x42\xe6\x42\x4a\x98\x05\x88\x02\xb2\x56\xdb\x2b\x6a\xce\xa1\xc6\xb3\x47\x42\xd2\x81\x38\xa7\x7d\x18\xef\xee\xee\xae\x44\xee\x6d\xee\x49\x53\x07\x5b\x6f\xf9\x6e\xe7\xa3\xee\x81\xdf\xef\xa1\xf7\x86\x2c\x66\xca\x76\x52\xad\x86\x83\xd8\x49\x92\x54\xf8\xc1\x08\xa6\x8d\x8a\x43\x3b\xa4\x96\x94\x1f\x81\x1a\x81\xdc\x81\x65\x35\x50\x92\xf5\xc3\x41\x88\x02\x07\xd1\x85\xca\x14\x9e\x60\xac\x0f\x3c\x00\x09\x0f\x60\x30\x82\x28\x20\xbc\xab\x65\xec\x2b\x15\x70\x9f\x6f\xca\xb9\xeb\xc9\xf9\xa4\x2b\xd6\x8a\xaa\xf0\x4a\xe5\x0d\xaa\x82\x71\x04\xc6\x52\x2b\x68\xfe\x59\x39\x02\xa1\x4a\x3a\xdb\xd0\x29\x20\x8f\x32\xa2\xb5\x93\x26\xca\xfe\xec\xd2\xb9\x3b\x0f\x8c\xbd\x25\x3c\xa6\x61\xc8\x6f\x11\xbf\x72\x27\xc6\x5b\x31\xfc\xd3\x79\x19\x00\x00\xff\xff\x3a\xc2\x33\xdd\xf9\x08\x00\x00")

func templatesUploadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUploadHtml,
		"templates/upload.html",
	)
}

func templatesUploadHtml() (*asset, error) {
	bytes, err := templatesUploadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upload.html", size: 2297, mode: os.FileMode(493), modTime: time.Unix(1509419215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/dash.html": templatesDashHtml,
	"templates/command.html": templatesCommandHtml,
	"templates/upload.html": templatesUploadHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"command.html": &bintree{templatesCommandHtml, map[string]*bintree{}},
		"dash.html": &bintree{templatesDashHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"upload.html": &bintree{templatesUploadHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

